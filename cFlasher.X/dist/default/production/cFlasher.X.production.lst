

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jun 17 12:32:40 2019

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F684
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text11,local,class=CODE,merge=1,delta=2
    19                           	psect	text12,local,class=CODE,merge=1,delta=2
    20                           	psect	text13,local,class=CODE,merge=1,delta=2
    21                           	psect	text14,local,class=CODE,merge=1,delta=2
    22                           	psect	text15,local,class=CODE,merge=1,delta=2
    23                           	psect	text16,local,class=CODE,merge=1,delta=2
    24                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text18,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.42
    29                           ; Generated 13/04/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F684 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0007                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0087                     	;# 
    92  008C                     	;# 
    93  008E                     	;# 
    94  008F                     	;# 
    95  0090                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0095                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0096                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0019                     _CMCON0	set	25
   111  0005                     _PORTA	set	5
   112  0007                     _PORTC	set	7
   113  002C                     _RA4	set	44
   114  002A                     _RA2	set	42
   115  0087                     _TRISC	set	135
   116  0085                     _TRISA	set	133
   117  0091                     _ANSEL	set	145
   118                           
   119                           ; #config settings
   120  0000                     
   121                           	psect	cinit
   122  07FE                     start_initialization:	
   123  07FE                     __initialization:	
   124  07FE                     end_of_initialization:	
   125                           ;End of C runtime variable initialization code
   126                           
   127  07FE                     __end_of__initialization:	
   128  07FE  0183               	clrf	3
   129  07FF  2816               	ljmp	_main	;jump to C main() function
   130                           
   131                           	psect	cstackCOMMON
   132  0070                     __pcstackCOMMON:	
   133  0070                     ?_Initialize:	
   134  0070                     ??_Initialize:	
   135                           ; 1 bytes @ 0x0
   136                           
   137  0070                     ?_patternOne:	
   138                           ; 1 bytes @ 0x0
   139                           
   140  0070                     ?_patternTwo:	
   141                           ; 1 bytes @ 0x0
   142                           
   143  0070                     ?_swipe:	
   144                           ; 1 bytes @ 0x0
   145                           
   146  0070                     ?_flashAllOn:	
   147                           ; 1 bytes @ 0x0
   148                           
   149  0070                     ?_endToEnd:	
   150                           ; 1 bytes @ 0x0
   151                           
   152  0070                     ?_doublePattern:	
   153                           ; 1 bytes @ 0x0
   154                           
   155  0070                     ?_crash:	
   156                           ; 1 bytes @ 0x0
   157                           
   158  0070                     ?_rotateDoubleBackwards:	
   159                           ; 1 bytes @ 0x0
   160                           
   161  0070                     ?_turnOnAll:	
   162                           ; 1 bytes @ 0x0
   163                           
   164  0070                     ??_turnOnAll:	
   165                           ; 1 bytes @ 0x0
   166                           
   167  0070                     ?_turnOffAll:	
   168                           ; 1 bytes @ 0x0
   169                           
   170  0070                     ??_turnOffAll:	
   171                           ; 1 bytes @ 0x0
   172                           
   173  0070                     ?_main:	
   174                           ; 1 bytes @ 0x0
   175                           
   176  0070                     ?___wmul:	
   177                           ; 2 bytes @ 0x0
   178                           
   179  0070                     ___wmul@multiplier:	
   180                           ; 2 bytes @ 0x0
   181                           
   182                           
   183                           ; 2 bytes @ 0x0
   184  0070                     	ds	2
   185  0072                     ___wmul@multiplicand:	
   186                           
   187                           ; 2 bytes @ 0x2
   188  0072                     	ds	2
   189  0074                     ??___wmul:	
   190  0074                     ___wmul@product:	
   191                           ; 1 bytes @ 0x4
   192                           
   193                           
   194                           ; 2 bytes @ 0x4
   195  0074                     	ds	2
   196  0076                     ?_msDelay:	
   197  0076                     msDelay@count:	
   198                           ; 1 bytes @ 0x6
   199                           
   200                           
   201                           ; 2 bytes @ 0x6
   202  0076                     	ds	2
   203  0078                     ??_msDelay:	
   204                           
   205                           ; 1 bytes @ 0x8
   206  0078                     	ds	1
   207  0079                     msDelay@i:	
   208                           
   209                           ; 2 bytes @ 0x9
   210  0079                     	ds	2
   211  007B                     ?_circlePattern:	
   212  007B                     ??_swipe:	
   213                           ; 1 bytes @ 0xB
   214                           
   215  007B                     ??_flashAllOn:	
   216                           ; 1 bytes @ 0xB
   217                           
   218  007B                     ?_flashAlternating:	
   219                           ; 1 bytes @ 0xB
   220                           
   221  007B                     ??_endToEnd:	
   222                           ; 1 bytes @ 0xB
   223                           
   224  007B                     ??_doublePattern:	
   225                           ; 1 bytes @ 0xB
   226                           
   227  007B                     ?_rotateDouble:	
   228                           ; 1 bytes @ 0xB
   229                           
   230  007B                     ??_crash:	
   231                           ; 1 bytes @ 0xB
   232                           
   233  007B                     ?_diagonalPattern:	
   234                           ; 1 bytes @ 0xB
   235                           
   236  007B                     ??_rotateDoubleBackwards:	
   237                           ; 1 bytes @ 0xB
   238                           
   239  007B                     ?_alternateDouble:	
   240                           ; 1 bytes @ 0xB
   241                           
   242  007B                     rotateDouble@multiplier:	
   243                           ; 1 bytes @ 0xB
   244                           
   245  007B                     alternateDouble@multiplier:	
   246                           ; 2 bytes @ 0xB
   247                           
   248  007B                     circlePattern@multiplier:	
   249                           ; 2 bytes @ 0xB
   250                           
   251  007B                     flashAllOn@k:	
   252                           ; 2 bytes @ 0xB
   253                           
   254  007B                     flashAlternating@multiplier:	
   255                           ; 2 bytes @ 0xB
   256                           
   257  007B                     diagonalPattern@multiplier:	
   258                           ; 2 bytes @ 0xB
   259                           
   260  007B                     crash@k:	
   261                           ; 2 bytes @ 0xB
   262                           
   263                           
   264                           ; 2 bytes @ 0xB
   265  007B                     	ds	2
   266  007D                     ??_patternOne:	
   267  007D                     ??_patternTwo:	
   268                           ; 1 bytes @ 0xD
   269                           
   270  007D                     ??_main:	
   271                           ; 1 bytes @ 0xD
   272                           
   273                           
   274                           	psect	cstackBANK0
   275  0020                     __pcstackBANK0:	
   276                           ; 1 bytes @ 0xD
   277                           
   278  0020                     ??_circlePattern:	
   279  0020                     ??_flashAlternating:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0020                     ??_rotateDouble:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0020                     ??_diagonalPattern:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0020                     ??_alternateDouble:	
   289                           ; 1 bytes @ 0x0
   290                           
   291                           
   292                           ; 1 bytes @ 0x0
   293  0020                     	ds	2
   294  0022                     rotateDouble@k:	
   295                           
   296                           ; 2 bytes @ 0x2
   297  0022                     	ds	2
   298  0024                     patternOne@i:	
   299  0024                     patternTwo@j:	
   300                           ; 2 bytes @ 0x4
   301                           
   302                           
   303                           ; 2 bytes @ 0x4
   304  0024                     	ds	2
   305  0026                     patternOne@j:	
   306  0026                     patternTwo@i_114:	
   307                           ; 2 bytes @ 0x6
   308                           
   309                           
   310                           ; 2 bytes @ 0x6
   311  0026                     	ds	2
   312  0028                     patternTwo@i_115:	
   313                           
   314                           ; 2 bytes @ 0x8
   315  0028                     	ds	2
   316  002A                     patternTwo@i:	
   317                           
   318                           ; 2 bytes @ 0xA
   319  002A                     	ds	2
   320  002C                     patternTwo@i_112:	
   321                           
   322                           ; 2 bytes @ 0xC
   323  002C                     	ds	2
   324  002E                     patternTwo@j_116:	
   325                           
   326                           ; 2 bytes @ 0xE
   327  002E                     	ds	2
   328                           
   329                           	psect	maintext
   330  0016                     __pmaintext:	
   331 ;;
   332 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   333 ;;
   334 ;; *************** function _main *****************
   335 ;; Defined at:
   336 ;;		line 93 in file "cFlasher.c"
   337 ;; Parameters:    Size  Location     Type
   338 ;;		None
   339 ;; Auto vars:     Size  Location     Type
   340 ;;		None
   341 ;; Return value:  Size  Location     Type
   342 ;;                  2   50[None  ] int 
   343 ;; Registers used:
   344 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : B00/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMMON   BANK0   BANK1
   350 ;;      Params:         0       0       0
   351 ;;      Locals:         0       0       0
   352 ;;      Temps:          0       0       0
   353 ;;      Totals:         0       0       0
   354 ;;Total ram usage:        0 bytes
   355 ;; Hardware stack levels required when called:    3
   356 ;; This function calls:
   357 ;;		_Initialize
   358 ;;		_patternOne
   359 ;;		_patternTwo
   360 ;; This function is called by:
   361 ;;		Startup code after reset
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           
   366                           ;psect for function _main
   367  0016                     _main:	
   368                           
   369                           ;cFlasher.c: 95: Initialize();
   370                           
   371                           ;incstack = 0
   372                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   373  0016  200D               	fcall	_Initialize
   374  0017                     l1645:	
   375                           ;cFlasher.c: 96: while (1){
   376                           
   377                           
   378                           ;cFlasher.c: 98: if (RA2 == 1 && RA4 == 1) {
   379  0017  1283               	bcf	3,5	;RP0=0, select bank0
   380  0018  1905               	btfsc	5,2	;volatile
   381  0019  1E05               	btfss	5,4	;volatile
   382  001A  281D               	goto	l1651
   383                           
   384                           ;cFlasher.c: 99: PORTC = 0b000000;
   385  001B  0187               	clrf	7	;volatile
   386                           
   387                           ;cFlasher.c: 100: PORTA = 0b000000;
   388  001C  0185               	clrf	5	;volatile
   389  001D                     l1651:	
   390                           
   391                           ;cFlasher.c: 101: }
   392                           ;cFlasher.c: 102: if (RA2 == 0 && RA4 == 1) {
   393  001D  1D05               	btfss	5,2	;volatile
   394  001E  1E05               	btfss	5,4	;volatile
   395  001F  2821               	goto	l1657
   396                           
   397                           ;cFlasher.c: 103: patternOne();
   398  0020  21A2               	fcall	_patternOne
   399  0021                     l1657:	
   400                           
   401                           ;cFlasher.c: 104: }
   402                           ;cFlasher.c: 105: if (RA2 == 1 && RA4 == 0) {
   403  0021  1283               	bcf	3,5	;RP0=0, select bank0
   404  0022  1905               	btfsc	5,2	;volatile
   405  0023  1A05               	btfsc	5,4	;volatile
   406  0024  2817               	goto	l1645
   407                           
   408                           ;cFlasher.c: 106: patternTwo();
   409  0025  2444               	fcall	_patternTwo
   410  0026  2817               	goto	l1645
   411  0027                     __end_of_main:	
   412                           
   413                           	psect	text1
   414  0444                     __ptext1:	
   415 ;; *************** function _patternTwo *****************
   416 ;; Defined at:
   417 ;;		line 213 in file "cFlasher.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;  j               2   14[BANK0 ] int 
   422 ;;  j               2    4[BANK0 ] int 
   423 ;;  i               2    8[BANK0 ] int 
   424 ;;  i               2    6[BANK0 ] int 
   425 ;;  i               2   12[BANK0 ] int 
   426 ;;  i               2   10[BANK0 ] int 
   427 ;; Return value:  Size  Location     Type
   428 ;;                  1    wreg      void 
   429 ;; Registers used:
   430 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : 0/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMMON   BANK0   BANK1
   436 ;;      Params:         0       0       0
   437 ;;      Locals:         0      12       0
   438 ;;      Temps:          0       0       0
   439 ;;      Totals:         0      12       0
   440 ;;Total ram usage:       12 bytes
   441 ;; Hardware stack levels used:    1
   442 ;; Hardware stack levels required when called:    2
   443 ;; This function calls:
   444 ;;		_alternateDouble
   445 ;;		_circlePattern
   446 ;;		_crash
   447 ;;		_diagonalPattern
   448 ;;		_doublePattern
   449 ;;		_endToEnd
   450 ;;		_flashAllOn
   451 ;;		_flashAlternating
   452 ;;		_msDelay
   453 ;;		_rotateDouble
   454 ;;		_rotateDoubleBackwards
   455 ;;		_swipe
   456 ;;		_turnOnAll
   457 ;; This function is called by:
   458 ;;		_main
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           
   463                           ;psect for function _patternTwo
   464  0444                     _patternTwo:	
   465                           
   466                           ;cFlasher.c: 215: flashAllOn();
   467                           
   468                           ;incstack = 0
   469                           ; Regs used in _patternTwo: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   470  0444  2097               	fcall	_flashAllOn
   471                           
   472                           ;cFlasher.c: 216: for (int i = 0; i < 2; i++) {
   473  0445  1283               	bcf	3,5	;RP0=0, select bank0
   474  0446  01AA               	clrf	patternTwo@i
   475  0447  01AB               	clrf	patternTwo@i+1
   476  0448  082B               	movf	patternTwo@i+1,w
   477  0449  3A80               	xorlw	128
   478  044A  00FF               	movwf	127
   479  044B  3080               	movlw	128
   480  044C  027F               	subwf	127,w
   481  044D  1D03               	skipz
   482  044E  2C51               	goto	u495
   483  044F  3002               	movlw	2
   484  0450  022A               	subwf	patternTwo@i,w
   485  0451                     u495:	
   486  0451  1803               	btfsc	3,0
   487  0452  2C71               	goto	l1575
   488  0453                     l1569:	
   489                           
   490                           ;cFlasher.c: 217: diagonalPattern(i);
   491  0453  1283               	bcf	3,5	;RP0=0, select bank0
   492  0454  082B               	movf	patternTwo@i+1,w
   493  0455  00FC               	movwf	diagonalPattern@multiplier+1
   494  0456  082A               	movf	patternTwo@i,w
   495  0457  00FB               	movwf	diagonalPattern@multiplier
   496  0458  2542               	fcall	_diagonalPattern
   497                           
   498                           ;cFlasher.c: 218: turnOnAll();
   499  0459  2007               	fcall	_turnOnAll
   500                           
   501                           ;cFlasher.c: 219: msDelay(100);
   502  045A  3064               	movlw	100
   503  045B  00F6               	movwf	msDelay@count
   504  045C  3000               	movlw	0
   505  045D  00F7               	movwf	msDelay@count+1
   506  045E  2027               	fcall	_msDelay
   507  045F  3001               	movlw	1
   508  0460  1283               	bcf	3,5	;RP0=0, select bank0
   509  0461  07AA               	addwf	patternTwo@i,f
   510  0462  1803               	skipnc
   511  0463  0AAB               	incf	patternTwo@i+1,f
   512  0464  3000               	movlw	0
   513  0465  07AB               	addwf	patternTwo@i+1,f
   514  0466  082B               	movf	patternTwo@i+1,w
   515  0467  3A80               	xorlw	128
   516  0468  00FF               	movwf	127
   517  0469  3080               	movlw	128
   518  046A  027F               	subwf	127,w
   519  046B  1D03               	skipz
   520  046C  2C6F               	goto	u505
   521  046D  3002               	movlw	2
   522  046E  022A               	subwf	patternTwo@i,w
   523  046F                     u505:	
   524  046F  1C03               	skipc
   525  0470  2C53               	goto	l1569
   526  0471                     l1575:	
   527                           
   528                           ;cFlasher.c: 220: }
   529                           ;cFlasher.c: 221: for (int i = 0; i < 3; i++) {
   530  0471  1283               	bcf	3,5	;RP0=0, select bank0
   531  0472  01AC               	clrf	patternTwo@i_112
   532  0473  01AD               	clrf	patternTwo@i_112+1
   533  0474  082D               	movf	patternTwo@i_112+1,w
   534  0475  3A80               	xorlw	128
   535  0476  00FF               	movwf	127
   536  0477  3080               	movlw	128
   537  0478  027F               	subwf	127,w
   538  0479  1D03               	skipz
   539  047A  2C7D               	goto	u515
   540  047B  3003               	movlw	3
   541  047C  022C               	subwf	patternTwo@i_112,w
   542  047D                     u515:	
   543  047D  1803               	btfsc	3,0
   544  047E  2CC0               	goto	l1601
   545  047F                     l1581:	
   546                           
   547                           ;cFlasher.c: 222: diagonalPattern(i);
   548  047F  1283               	bcf	3,5	;RP0=0, select bank0
   549  0480  082D               	movf	patternTwo@i_112+1,w
   550  0481  00FC               	movwf	diagonalPattern@multiplier+1
   551  0482  082C               	movf	patternTwo@i_112,w
   552  0483  00FB               	movwf	diagonalPattern@multiplier
   553  0484  2542               	fcall	_diagonalPattern
   554                           
   555                           ;cFlasher.c: 223: swipe();
   556  0485  20B9               	fcall	_swipe
   557                           
   558                           ;cFlasher.c: 224: doublePattern();
   559  0486  203F               	fcall	_doublePattern
   560                           
   561                           ;cFlasher.c: 225: for (int j = 0; j < 3; j++) {
   562  0487  1283               	bcf	3,5	;RP0=0, select bank0
   563  0488  01A4               	clrf	patternTwo@j
   564  0489  01A5               	clrf	patternTwo@j+1
   565  048A  0825               	movf	patternTwo@j+1,w
   566  048B  3A80               	xorlw	128
   567  048C  00FF               	movwf	127
   568  048D  3080               	movlw	128
   569  048E  027F               	subwf	127,w
   570  048F  1D03               	skipz
   571  0490  2C93               	goto	u525
   572  0491  3003               	movlw	3
   573  0492  0224               	subwf	patternTwo@j,w
   574  0493                     u525:	
   575  0493  1803               	btfsc	3,0
   576  0494  2CAD               	goto	l1595
   577  0495                     l1589:	
   578                           
   579                           ;cFlasher.c: 226: circlePattern(i);
   580  0495  1283               	bcf	3,5	;RP0=0, select bank0
   581  0496  082D               	movf	patternTwo@i_112+1,w
   582  0497  00FC               	movwf	circlePattern@multiplier+1
   583  0498  082C               	movf	patternTwo@i_112,w
   584  0499  00FB               	movwf	circlePattern@multiplier
   585  049A  2665               	fcall	_circlePattern
   586  049B  3001               	movlw	1
   587  049C  1283               	bcf	3,5	;RP0=0, select bank0
   588  049D  07A4               	addwf	patternTwo@j,f
   589  049E  1803               	skipnc
   590  049F  0AA5               	incf	patternTwo@j+1,f
   591  04A0  3000               	movlw	0
   592  04A1  07A5               	addwf	patternTwo@j+1,f
   593  04A2  0825               	movf	patternTwo@j+1,w
   594  04A3  3A80               	xorlw	128
   595  04A4  00FF               	movwf	127
   596  04A5  3080               	movlw	128
   597  04A6  027F               	subwf	127,w
   598  04A7  1D03               	skipz
   599  04A8  2CAB               	goto	u535
   600  04A9  3003               	movlw	3
   601  04AA  0224               	subwf	patternTwo@j,w
   602  04AB                     u535:	
   603  04AB  1C03               	skipc
   604  04AC  2C95               	goto	l1589
   605  04AD                     l1595:	
   606                           
   607                           ;cFlasher.c: 227: }
   608                           ;cFlasher.c: 228: rotateDoubleBackwards();
   609  04AD  2059               	fcall	_rotateDoubleBackwards
   610  04AE  3001               	movlw	1
   611  04AF  1283               	bcf	3,5	;RP0=0, select bank0
   612  04B0  07AC               	addwf	patternTwo@i_112,f
   613  04B1  1803               	skipnc
   614  04B2  0AAD               	incf	patternTwo@i_112+1,f
   615  04B3  3000               	movlw	0
   616  04B4  07AD               	addwf	patternTwo@i_112+1,f
   617  04B5  082D               	movf	patternTwo@i_112+1,w
   618  04B6  3A80               	xorlw	128
   619  04B7  00FF               	movwf	127
   620  04B8  3080               	movlw	128
   621  04B9  027F               	subwf	127,w
   622  04BA  1D03               	skipz
   623  04BB  2CBE               	goto	u545
   624  04BC  3003               	movlw	3
   625  04BD  022C               	subwf	patternTwo@i_112,w
   626  04BE                     u545:	
   627  04BE  1C03               	skipc
   628  04BF  2C7F               	goto	l1581
   629  04C0                     l1601:	
   630                           
   631                           ;cFlasher.c: 229: }
   632                           ;cFlasher.c: 230: for (int i = 0; i < 5; i++) {
   633  04C0  1283               	bcf	3,5	;RP0=0, select bank0
   634  04C1  01A6               	clrf	patternTwo@i_114
   635  04C2  01A7               	clrf	patternTwo@i_114+1
   636  04C3  0827               	movf	patternTwo@i_114+1,w
   637  04C4  3A80               	xorlw	128
   638  04C5  00FF               	movwf	127
   639  04C6  3080               	movlw	128
   640  04C7  027F               	subwf	127,w
   641  04C8  1D03               	skipz
   642  04C9  2CCC               	goto	u555
   643  04CA  3005               	movlw	5
   644  04CB  0226               	subwf	patternTwo@i_114,w
   645  04CC                     u555:	
   646  04CC  1803               	btfsc	3,0
   647  04CD  2CE4               	goto	l1613
   648  04CE                     l1607:	
   649                           
   650                           ;cFlasher.c: 231: rotateDouble(0);
   651  04CE  3000               	movlw	0
   652  04CF  00FB               	movwf	rotateDouble@multiplier
   653  04D0  00FC               	movwf	rotateDouble@multiplier+1
   654  04D1  2204               	fcall	_rotateDouble
   655  04D2  3001               	movlw	1
   656  04D3  1283               	bcf	3,5	;RP0=0, select bank0
   657  04D4  07A6               	addwf	patternTwo@i_114,f
   658  04D5  1803               	skipnc
   659  04D6  0AA7               	incf	patternTwo@i_114+1,f
   660  04D7  3000               	movlw	0
   661  04D8  07A7               	addwf	patternTwo@i_114+1,f
   662  04D9  0827               	movf	patternTwo@i_114+1,w
   663  04DA  3A80               	xorlw	128
   664  04DB  00FF               	movwf	127
   665  04DC  3080               	movlw	128
   666  04DD  027F               	subwf	127,w
   667  04DE  1D03               	skipz
   668  04DF  2CE2               	goto	u565
   669  04E0  3005               	movlw	5
   670  04E1  0226               	subwf	patternTwo@i_114,w
   671  04E2                     u565:	
   672  04E2  1C03               	skipc
   673  04E3  2CCE               	goto	l1607
   674  04E4                     l1613:	
   675                           
   676                           ;cFlasher.c: 232: }
   677                           ;cFlasher.c: 233: for (int i = 0; i < 2; i++) {
   678  04E4  1283               	bcf	3,5	;RP0=0, select bank0
   679  04E5  01A8               	clrf	patternTwo@i_115
   680  04E6  01A9               	clrf	patternTwo@i_115+1
   681  04E7  0829               	movf	patternTwo@i_115+1,w
   682  04E8  3A80               	xorlw	128
   683  04E9  00FF               	movwf	127
   684  04EA  3080               	movlw	128
   685  04EB  027F               	subwf	127,w
   686  04EC  1D03               	skipz
   687  04ED  2CF0               	goto	u575
   688  04EE  3002               	movlw	2
   689  04EF  0228               	subwf	patternTwo@i_115,w
   690  04F0                     u575:	
   691  04F0  1803               	btfsc	3,0
   692  04F1  2D33               	goto	l1639
   693  04F2                     l1619:	
   694                           
   695                           ;cFlasher.c: 234: swipe();
   696  04F2  20B9               	fcall	_swipe
   697                           
   698                           ;cFlasher.c: 235: for (int j = 0; j < 4; j++) {
   699  04F3  1283               	bcf	3,5	;RP0=0, select bank0
   700  04F4  01AE               	clrf	patternTwo@j_116
   701  04F5  01AF               	clrf	patternTwo@j_116+1
   702  04F6  082F               	movf	patternTwo@j_116+1,w
   703  04F7  3A80               	xorlw	128
   704  04F8  00FF               	movwf	127
   705  04F9  3080               	movlw	128
   706  04FA  027F               	subwf	127,w
   707  04FB  1D03               	skipz
   708  04FC  2CFF               	goto	u585
   709  04FD  3004               	movlw	4
   710  04FE  022E               	subwf	patternTwo@j_116,w
   711  04FF                     u585:	
   712  04FF  1803               	btfsc	3,0
   713  0500  2D1F               	goto	l1633
   714  0501                     l1627:	
   715                           
   716                           ;cFlasher.c: 236: circlePattern(j);
   717  0501  1283               	bcf	3,5	;RP0=0, select bank0
   718  0502  082F               	movf	patternTwo@j_116+1,w
   719  0503  00FC               	movwf	circlePattern@multiplier+1
   720  0504  082E               	movf	patternTwo@j_116,w
   721  0505  00FB               	movwf	circlePattern@multiplier
   722  0506  2665               	fcall	_circlePattern
   723                           
   724                           ;cFlasher.c: 237: alternateDouble(j);
   725  0507  1283               	bcf	3,5	;RP0=0, select bank0
   726  0508  082F               	movf	patternTwo@j_116+1,w
   727  0509  00FC               	movwf	alternateDouble@multiplier+1
   728  050A  082E               	movf	patternTwo@j_116,w
   729  050B  00FB               	movwf	alternateDouble@multiplier
   730  050C  22AC               	fcall	_alternateDouble
   731  050D  3001               	movlw	1
   732  050E  1283               	bcf	3,5	;RP0=0, select bank0
   733  050F  07AE               	addwf	patternTwo@j_116,f
   734  0510  1803               	skipnc
   735  0511  0AAF               	incf	patternTwo@j_116+1,f
   736  0512  3000               	movlw	0
   737  0513  07AF               	addwf	patternTwo@j_116+1,f
   738  0514  082F               	movf	patternTwo@j_116+1,w
   739  0515  3A80               	xorlw	128
   740  0516  00FF               	movwf	127
   741  0517  3080               	movlw	128
   742  0518  027F               	subwf	127,w
   743  0519  1D03               	skipz
   744  051A  2D1D               	goto	u595
   745  051B  3004               	movlw	4
   746  051C  022E               	subwf	patternTwo@j_116,w
   747  051D                     u595:	
   748  051D  1C03               	skipc
   749  051E  2D01               	goto	l1627
   750  051F                     l1633:	
   751                           
   752                           ;cFlasher.c: 238: }
   753                           ;cFlasher.c: 239: crash();
   754  051F  20FC               	fcall	_crash
   755                           
   756                           ;cFlasher.c: 240: flashAllOn();
   757  0520  2097               	fcall	_flashAllOn
   758  0521  3001               	movlw	1
   759  0522  1283               	bcf	3,5	;RP0=0, select bank0
   760  0523  07A8               	addwf	patternTwo@i_115,f
   761  0524  1803               	skipnc
   762  0525  0AA9               	incf	patternTwo@i_115+1,f
   763  0526  3000               	movlw	0
   764  0527  07A9               	addwf	patternTwo@i_115+1,f
   765  0528  0829               	movf	patternTwo@i_115+1,w
   766  0529  3A80               	xorlw	128
   767  052A  00FF               	movwf	127
   768  052B  3080               	movlw	128
   769  052C  027F               	subwf	127,w
   770  052D  1D03               	skipz
   771  052E  2D31               	goto	u605
   772  052F  3002               	movlw	2
   773  0530  0228               	subwf	patternTwo@i_115,w
   774  0531                     u605:	
   775  0531  1C03               	skipc
   776  0532  2CF2               	goto	l1619
   777  0533                     l1639:	
   778                           
   779                           ;cFlasher.c: 241: }
   780                           ;cFlasher.c: 242: diagonalPattern(0);
   781  0533  3000               	movlw	0
   782  0534  00FB               	movwf	diagonalPattern@multiplier
   783  0535  00FC               	movwf	diagonalPattern@multiplier+1
   784  0536  2542               	fcall	_diagonalPattern
   785                           
   786                           ;cFlasher.c: 243: flashAlternating(0);
   787  0537  3000               	movlw	0
   788  0538  00FB               	movwf	flashAlternating@multiplier
   789  0539  00FC               	movwf	flashAlternating@multiplier+1
   790  053A  214C               	fcall	_flashAlternating
   791                           
   792                           ;cFlasher.c: 244: circlePattern(0);
   793  053B  3000               	movlw	0
   794  053C  00FB               	movwf	circlePattern@multiplier
   795  053D  00FC               	movwf	circlePattern@multiplier+1
   796  053E  2665               	fcall	_circlePattern
   797                           
   798                           ;cFlasher.c: 245: endToEnd();
   799  053F  2376               	fcall	_endToEnd
   800                           
   801                           ;cFlasher.c: 246: flashAllOn();
   802  0540  2097               	fcall	_flashAllOn
   803  0541  0008               	return
   804  0542                     __end_of_patternTwo:	
   805                           
   806                           	psect	text2
   807  0059                     __ptext2:	
   808 ;; *************** function _rotateDoubleBackwards *****************
   809 ;; Defined at:
   810 ;;		line 379 in file "cFlasher.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, status,2, status,0, pclath, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMMON   BANK0   BANK1
   824 ;;      Params:         0       0       0
   825 ;;      Locals:         0       0       0
   826 ;;      Temps:          0       0       0
   827 ;;      Totals:         0       0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    1
   831 ;; This function calls:
   832 ;;		_msDelay
   833 ;; This function is called by:
   834 ;;		_patternTwo
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           
   839                           ;psect for function _rotateDoubleBackwards
   840  0059                     _rotateDoubleBackwards:	
   841                           
   842                           ;cFlasher.c: 381: PORTA = 0b000000;
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in _rotateDoubleBackwards: [wreg+status,2+status,0+pclath+cstack]
   846  0059  1283               	bcf	3,5	;RP0=0, select bank0
   847  005A  0185               	clrf	5	;volatile
   848                           
   849                           ;cFlasher.c: 382: PORTC = 0b010000 | 0b100000;
   850  005B  3030               	movlw	48
   851  005C  0087               	movwf	7	;volatile
   852                           
   853                           ;cFlasher.c: 383: msDelay(150);
   854  005D  3096               	movlw	150
   855  005E  00F6               	movwf	msDelay@count
   856  005F  3000               	movlw	0
   857  0060  00F7               	movwf	msDelay@count+1
   858  0061  2027               	fcall	_msDelay
   859                           
   860                           ;cFlasher.c: 384: PORTA = 0b000001;
   861  0062  3001               	movlw	1
   862  0063  1283               	bcf	3,5	;RP0=0, select bank0
   863  0064  0085               	movwf	5	;volatile
   864                           
   865                           ;cFlasher.c: 385: PORTC = 0b000001;
   866  0065  3001               	movlw	1
   867  0066  0087               	movwf	7	;volatile
   868                           
   869                           ;cFlasher.c: 386: msDelay(150);
   870  0067  3096               	movlw	150
   871  0068  00F6               	movwf	msDelay@count
   872  0069  3000               	movlw	0
   873  006A  00F7               	movwf	msDelay@count+1
   874  006B  2027               	fcall	_msDelay
   875                           
   876                           ;cFlasher.c: 387: PORTC = 0b000010 | 0b000100;
   877  006C  3006               	movlw	6
   878  006D  1283               	bcf	3,5	;RP0=0, select bank0
   879  006E  0087               	movwf	7	;volatile
   880                           
   881                           ;cFlasher.c: 388: PORTA = 0b000000;
   882  006F  0185               	clrf	5	;volatile
   883                           
   884                           ;cFlasher.c: 389: msDelay(150);
   885  0070  3096               	movlw	150
   886  0071  00F6               	movwf	msDelay@count
   887  0072  3000               	movlw	0
   888  0073  00F7               	movwf	msDelay@count+1
   889  0074  2027               	fcall	_msDelay
   890  0075  0008               	return
   891  0076                     __end_of_rotateDoubleBackwards:	
   892                           
   893                           	psect	text3
   894  0542                     __ptext3:	
   895 ;; *************** function _diagonalPattern *****************
   896 ;; Defined at:
   897 ;;		line 504 in file "cFlasher.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  multiplier      2   11[COMMON] int 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, status,2, status,0, pclath, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0   BANK1
   911 ;;      Params:         2       0       0
   912 ;;      Locals:         0       0       0
   913 ;;      Temps:          0       2       0
   914 ;;      Totals:         2       2       0
   915 ;;Total ram usage:        4 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    1
   918 ;; This function calls:
   919 ;;		___wmul
   920 ;;		_msDelay
   921 ;;		_turnOffAll
   922 ;; This function is called by:
   923 ;;		_patternTwo
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           
   928                           ;psect for function _diagonalPattern
   929  0542                     _diagonalPattern:	
   930                           
   931                           ;cFlasher.c: 506: turnOffAll();
   932                           
   933                           ;incstack = 0
   934                           ; Regs used in _diagonalPattern: [wreg+status,2+status,0+pclath+cstack]
   935  0542  2003               	fcall	_turnOffAll
   936                           
   937                           ;cFlasher.c: 507: msDelay(100 - multiplier * 30);
   938  0543  087C               	movf	diagonalPattern@multiplier+1,w
   939  0544  00F1               	movwf	___wmul@multiplier+1
   940  0545  087B               	movf	diagonalPattern@multiplier,w
   941  0546  00F0               	movwf	___wmul@multiplier
   942  0547  301E               	movlw	30
   943  0548  00F2               	movwf	___wmul@multiplicand
   944  0549  3000               	movlw	0
   945  054A  00F3               	movwf	___wmul@multiplicand+1
   946  054B  2076               	fcall	___wmul
   947  054C  0970               	comf	?___wmul,w
   948  054D  1283               	bcf	3,5	;RP0=0, select bank0
   949  054E  00A0               	movwf	??_diagonalPattern
   950  054F  0971               	comf	?___wmul+1,w
   951  0550  00A1               	movwf	??_diagonalPattern+1
   952  0551  0AA0               	incf	??_diagonalPattern,f
   953  0552  1903               	skipnz
   954  0553  0AA1               	incf	??_diagonalPattern+1,f
   955  0554  0820               	movf	??_diagonalPattern,w
   956  0555  3E64               	addlw	100
   957  0556  00F6               	movwf	msDelay@count
   958  0557  0821               	movf	??_diagonalPattern+1,w
   959  0558  1803               	skipnc
   960  0559  3E01               	addlw	1
   961  055A  3E00               	addlw	0
   962  055B  00F7               	movwf	msDelay@count+1
   963  055C  2027               	fcall	_msDelay
   964                           
   965                           ;cFlasher.c: 508: PORTA = 0b000001;
   966  055D  3001               	movlw	1
   967  055E  1283               	bcf	3,5	;RP0=0, select bank0
   968  055F  0085               	movwf	5	;volatile
   969                           
   970                           ;cFlasher.c: 509: msDelay(100 - multiplier * 30);
   971  0560  087C               	movf	diagonalPattern@multiplier+1,w
   972  0561  00F1               	movwf	___wmul@multiplier+1
   973  0562  087B               	movf	diagonalPattern@multiplier,w
   974  0563  00F0               	movwf	___wmul@multiplier
   975  0564  301E               	movlw	30
   976  0565  00F2               	movwf	___wmul@multiplicand
   977  0566  3000               	movlw	0
   978  0567  00F3               	movwf	___wmul@multiplicand+1
   979  0568  2076               	fcall	___wmul
   980  0569  0970               	comf	?___wmul,w
   981  056A  1283               	bcf	3,5	;RP0=0, select bank0
   982  056B  00A0               	movwf	??_diagonalPattern
   983  056C  0971               	comf	?___wmul+1,w
   984  056D  00A1               	movwf	??_diagonalPattern+1
   985  056E  0AA0               	incf	??_diagonalPattern,f
   986  056F  1903               	skipnz
   987  0570  0AA1               	incf	??_diagonalPattern+1,f
   988  0571  0820               	movf	??_diagonalPattern,w
   989  0572  3E64               	addlw	100
   990  0573  00F6               	movwf	msDelay@count
   991  0574  0821               	movf	??_diagonalPattern+1,w
   992  0575  1803               	skipnc
   993  0576  3E01               	addlw	1
   994  0577  3E00               	addlw	0
   995  0578  00F7               	movwf	msDelay@count+1
   996  0579  2027               	fcall	_msDelay
   997                           
   998                           ;cFlasher.c: 510: PORTA = 0b000000;
   999  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1000  057B  0185               	clrf	5	;volatile
  1001                           
  1002                           ;cFlasher.c: 511: PORTC = 0b000001;
  1003  057C  3001               	movlw	1
  1004  057D  0087               	movwf	7	;volatile
  1005                           
  1006                           ;cFlasher.c: 512: msDelay(150 - multiplier * 30);
  1007  057E  087C               	movf	diagonalPattern@multiplier+1,w
  1008  057F  00F1               	movwf	___wmul@multiplier+1
  1009  0580  087B               	movf	diagonalPattern@multiplier,w
  1010  0581  00F0               	movwf	___wmul@multiplier
  1011  0582  301E               	movlw	30
  1012  0583  00F2               	movwf	___wmul@multiplicand
  1013  0584  3000               	movlw	0
  1014  0585  00F3               	movwf	___wmul@multiplicand+1
  1015  0586  2076               	fcall	___wmul
  1016  0587  0970               	comf	?___wmul,w
  1017  0588  1283               	bcf	3,5	;RP0=0, select bank0
  1018  0589  00A0               	movwf	??_diagonalPattern
  1019  058A  0971               	comf	?___wmul+1,w
  1020  058B  00A1               	movwf	??_diagonalPattern+1
  1021  058C  0AA0               	incf	??_diagonalPattern,f
  1022  058D  1903               	skipnz
  1023  058E  0AA1               	incf	??_diagonalPattern+1,f
  1024  058F  0820               	movf	??_diagonalPattern,w
  1025  0590  3E96               	addlw	150
  1026  0591  00F6               	movwf	msDelay@count
  1027  0592  0821               	movf	??_diagonalPattern+1,w
  1028  0593  1803               	skipnc
  1029  0594  3E01               	addlw	1
  1030  0595  3E00               	addlw	0
  1031  0596  00F7               	movwf	msDelay@count+1
  1032  0597  2027               	fcall	_msDelay
  1033                           
  1034                           ;cFlasher.c: 513: PORTC = 0b001000;
  1035  0598  3008               	movlw	8
  1036  0599  1283               	bcf	3,5	;RP0=0, select bank0
  1037  059A  0087               	movwf	7	;volatile
  1038                           
  1039                           ;cFlasher.c: 514: msDelay(150 - multiplier * 30);
  1040  059B  087C               	movf	diagonalPattern@multiplier+1,w
  1041  059C  00F1               	movwf	___wmul@multiplier+1
  1042  059D  087B               	movf	diagonalPattern@multiplier,w
  1043  059E  00F0               	movwf	___wmul@multiplier
  1044  059F  301E               	movlw	30
  1045  05A0  00F2               	movwf	___wmul@multiplicand
  1046  05A1  3000               	movlw	0
  1047  05A2  00F3               	movwf	___wmul@multiplicand+1
  1048  05A3  2076               	fcall	___wmul
  1049  05A4  0970               	comf	?___wmul,w
  1050  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  1051  05A6  00A0               	movwf	??_diagonalPattern
  1052  05A7  0971               	comf	?___wmul+1,w
  1053  05A8  00A1               	movwf	??_diagonalPattern+1
  1054  05A9  0AA0               	incf	??_diagonalPattern,f
  1055  05AA  1903               	skipnz
  1056  05AB  0AA1               	incf	??_diagonalPattern+1,f
  1057  05AC  0820               	movf	??_diagonalPattern,w
  1058  05AD  3E96               	addlw	150
  1059  05AE  00F6               	movwf	msDelay@count
  1060  05AF  0821               	movf	??_diagonalPattern+1,w
  1061  05B0  1803               	skipnc
  1062  05B1  3E01               	addlw	1
  1063  05B2  3E00               	addlw	0
  1064  05B3  00F7               	movwf	msDelay@count+1
  1065  05B4  2027               	fcall	_msDelay
  1066                           
  1067                           ;cFlasher.c: 515: PORTC = 0b000000;
  1068  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  1069  05B6  0187               	clrf	7	;volatile
  1070                           
  1071                           ;cFlasher.c: 516: PORTA = 0b100000;
  1072  05B7  3020               	movlw	32
  1073  05B8  0085               	movwf	5	;volatile
  1074                           
  1075                           ;cFlasher.c: 517: msDelay(150 - multiplier * 30);
  1076  05B9  087C               	movf	diagonalPattern@multiplier+1,w
  1077  05BA  00F1               	movwf	___wmul@multiplier+1
  1078  05BB  087B               	movf	diagonalPattern@multiplier,w
  1079  05BC  00F0               	movwf	___wmul@multiplier
  1080  05BD  301E               	movlw	30
  1081  05BE  00F2               	movwf	___wmul@multiplicand
  1082  05BF  3000               	movlw	0
  1083  05C0  00F3               	movwf	___wmul@multiplicand+1
  1084  05C1  2076               	fcall	___wmul
  1085  05C2  0970               	comf	?___wmul,w
  1086  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  1087  05C4  00A0               	movwf	??_diagonalPattern
  1088  05C5  0971               	comf	?___wmul+1,w
  1089  05C6  00A1               	movwf	??_diagonalPattern+1
  1090  05C7  0AA0               	incf	??_diagonalPattern,f
  1091  05C8  1903               	skipnz
  1092  05C9  0AA1               	incf	??_diagonalPattern+1,f
  1093  05CA  0820               	movf	??_diagonalPattern,w
  1094  05CB  3E96               	addlw	150
  1095  05CC  00F6               	movwf	msDelay@count
  1096  05CD  0821               	movf	??_diagonalPattern+1,w
  1097  05CE  1803               	skipnc
  1098  05CF  3E01               	addlw	1
  1099  05D0  3E00               	addlw	0
  1100  05D1  00F7               	movwf	msDelay@count+1
  1101  05D2  2027               	fcall	_msDelay
  1102                           
  1103                           ;cFlasher.c: 519: turnOffAll();
  1104  05D3  2003               	fcall	_turnOffAll
  1105                           
  1106                           ;cFlasher.c: 520: msDelay(100 - multiplier * 30);
  1107  05D4  087C               	movf	diagonalPattern@multiplier+1,w
  1108  05D5  00F1               	movwf	___wmul@multiplier+1
  1109  05D6  087B               	movf	diagonalPattern@multiplier,w
  1110  05D7  00F0               	movwf	___wmul@multiplier
  1111  05D8  301E               	movlw	30
  1112  05D9  00F2               	movwf	___wmul@multiplicand
  1113  05DA  3000               	movlw	0
  1114  05DB  00F3               	movwf	___wmul@multiplicand+1
  1115  05DC  2076               	fcall	___wmul
  1116  05DD  0970               	comf	?___wmul,w
  1117  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1118  05DF  00A0               	movwf	??_diagonalPattern
  1119  05E0  0971               	comf	?___wmul+1,w
  1120  05E1  00A1               	movwf	??_diagonalPattern+1
  1121  05E2  0AA0               	incf	??_diagonalPattern,f
  1122  05E3  1903               	skipnz
  1123  05E4  0AA1               	incf	??_diagonalPattern+1,f
  1124  05E5  0820               	movf	??_diagonalPattern,w
  1125  05E6  3E64               	addlw	100
  1126  05E7  00F6               	movwf	msDelay@count
  1127  05E8  0821               	movf	??_diagonalPattern+1,w
  1128  05E9  1803               	skipnc
  1129  05EA  3E01               	addlw	1
  1130  05EB  3E00               	addlw	0
  1131  05EC  00F7               	movwf	msDelay@count+1
  1132  05ED  2027               	fcall	_msDelay
  1133                           
  1134                           ;cFlasher.c: 521: PORTA = 0b100000;
  1135  05EE  3020               	movlw	32
  1136  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  1137  05F0  0085               	movwf	5	;volatile
  1138                           
  1139                           ;cFlasher.c: 522: msDelay(100 - multiplier * 30);
  1140  05F1  087C               	movf	diagonalPattern@multiplier+1,w
  1141  05F2  00F1               	movwf	___wmul@multiplier+1
  1142  05F3  087B               	movf	diagonalPattern@multiplier,w
  1143  05F4  00F0               	movwf	___wmul@multiplier
  1144  05F5  301E               	movlw	30
  1145  05F6  00F2               	movwf	___wmul@multiplicand
  1146  05F7  3000               	movlw	0
  1147  05F8  00F3               	movwf	___wmul@multiplicand+1
  1148  05F9  2076               	fcall	___wmul
  1149  05FA  0970               	comf	?___wmul,w
  1150  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1151  05FC  00A0               	movwf	??_diagonalPattern
  1152  05FD  0971               	comf	?___wmul+1,w
  1153  05FE  00A1               	movwf	??_diagonalPattern+1
  1154  05FF  0AA0               	incf	??_diagonalPattern,f
  1155  0600  1903               	skipnz
  1156  0601  0AA1               	incf	??_diagonalPattern+1,f
  1157  0602  0820               	movf	??_diagonalPattern,w
  1158  0603  3E64               	addlw	100
  1159  0604  00F6               	movwf	msDelay@count
  1160  0605  0821               	movf	??_diagonalPattern+1,w
  1161  0606  1803               	skipnc
  1162  0607  3E01               	addlw	1
  1163  0608  3E00               	addlw	0
  1164  0609  00F7               	movwf	msDelay@count+1
  1165  060A  2027               	fcall	_msDelay
  1166                           
  1167                           ;cFlasher.c: 523: PORTA = 0b000000;
  1168  060B  1283               	bcf	3,5	;RP0=0, select bank0
  1169  060C  0185               	clrf	5	;volatile
  1170                           
  1171                           ;cFlasher.c: 524: PORTC = 0b001000;
  1172  060D  3008               	movlw	8
  1173  060E  0087               	movwf	7	;volatile
  1174                           
  1175                           ;cFlasher.c: 525: msDelay(150 - multiplier * 30);
  1176  060F  087C               	movf	diagonalPattern@multiplier+1,w
  1177  0610  00F1               	movwf	___wmul@multiplier+1
  1178  0611  087B               	movf	diagonalPattern@multiplier,w
  1179  0612  00F0               	movwf	___wmul@multiplier
  1180  0613  301E               	movlw	30
  1181  0614  00F2               	movwf	___wmul@multiplicand
  1182  0615  3000               	movlw	0
  1183  0616  00F3               	movwf	___wmul@multiplicand+1
  1184  0617  2076               	fcall	___wmul
  1185  0618  0970               	comf	?___wmul,w
  1186  0619  1283               	bcf	3,5	;RP0=0, select bank0
  1187  061A  00A0               	movwf	??_diagonalPattern
  1188  061B  0971               	comf	?___wmul+1,w
  1189  061C  00A1               	movwf	??_diagonalPattern+1
  1190  061D  0AA0               	incf	??_diagonalPattern,f
  1191  061E  1903               	skipnz
  1192  061F  0AA1               	incf	??_diagonalPattern+1,f
  1193  0620  0820               	movf	??_diagonalPattern,w
  1194  0621  3E96               	addlw	150
  1195  0622  00F6               	movwf	msDelay@count
  1196  0623  0821               	movf	??_diagonalPattern+1,w
  1197  0624  1803               	skipnc
  1198  0625  3E01               	addlw	1
  1199  0626  3E00               	addlw	0
  1200  0627  00F7               	movwf	msDelay@count+1
  1201  0628  2027               	fcall	_msDelay
  1202                           
  1203                           ;cFlasher.c: 526: PORTC = 0b000001;
  1204  0629  3001               	movlw	1
  1205  062A  1283               	bcf	3,5	;RP0=0, select bank0
  1206  062B  0087               	movwf	7	;volatile
  1207                           
  1208                           ;cFlasher.c: 527: msDelay(150 - multiplier * 30);
  1209  062C  087C               	movf	diagonalPattern@multiplier+1,w
  1210  062D  00F1               	movwf	___wmul@multiplier+1
  1211  062E  087B               	movf	diagonalPattern@multiplier,w
  1212  062F  00F0               	movwf	___wmul@multiplier
  1213  0630  301E               	movlw	30
  1214  0631  00F2               	movwf	___wmul@multiplicand
  1215  0632  3000               	movlw	0
  1216  0633  00F3               	movwf	___wmul@multiplicand+1
  1217  0634  2076               	fcall	___wmul
  1218  0635  0970               	comf	?___wmul,w
  1219  0636  1283               	bcf	3,5	;RP0=0, select bank0
  1220  0637  00A0               	movwf	??_diagonalPattern
  1221  0638  0971               	comf	?___wmul+1,w
  1222  0639  00A1               	movwf	??_diagonalPattern+1
  1223  063A  0AA0               	incf	??_diagonalPattern,f
  1224  063B  1903               	skipnz
  1225  063C  0AA1               	incf	??_diagonalPattern+1,f
  1226  063D  0820               	movf	??_diagonalPattern,w
  1227  063E  3E96               	addlw	150
  1228  063F  00F6               	movwf	msDelay@count
  1229  0640  0821               	movf	??_diagonalPattern+1,w
  1230  0641  1803               	skipnc
  1231  0642  3E01               	addlw	1
  1232  0643  3E00               	addlw	0
  1233  0644  00F7               	movwf	msDelay@count+1
  1234  0645  2027               	fcall	_msDelay
  1235                           
  1236                           ;cFlasher.c: 528: PORTC = 0b000000;
  1237  0646  1283               	bcf	3,5	;RP0=0, select bank0
  1238  0647  0187               	clrf	7	;volatile
  1239                           
  1240                           ;cFlasher.c: 529: PORTA = 0b000001;
  1241  0648  3001               	movlw	1
  1242  0649  0085               	movwf	5	;volatile
  1243                           
  1244                           ;cFlasher.c: 530: msDelay(150 - multiplier * 30);
  1245  064A  087C               	movf	diagonalPattern@multiplier+1,w
  1246  064B  00F1               	movwf	___wmul@multiplier+1
  1247  064C  087B               	movf	diagonalPattern@multiplier,w
  1248  064D  00F0               	movwf	___wmul@multiplier
  1249  064E  301E               	movlw	30
  1250  064F  00F2               	movwf	___wmul@multiplicand
  1251  0650  3000               	movlw	0
  1252  0651  00F3               	movwf	___wmul@multiplicand+1
  1253  0652  2076               	fcall	___wmul
  1254  0653  0970               	comf	?___wmul,w
  1255  0654  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0655  00A0               	movwf	??_diagonalPattern
  1257  0656  0971               	comf	?___wmul+1,w
  1258  0657  00A1               	movwf	??_diagonalPattern+1
  1259  0658  0AA0               	incf	??_diagonalPattern,f
  1260  0659  1903               	skipnz
  1261  065A  0AA1               	incf	??_diagonalPattern+1,f
  1262  065B  0820               	movf	??_diagonalPattern,w
  1263  065C  3E96               	addlw	150
  1264  065D  00F6               	movwf	msDelay@count
  1265  065E  0821               	movf	??_diagonalPattern+1,w
  1266  065F  1803               	skipnc
  1267  0660  3E01               	addlw	1
  1268  0661  3E00               	addlw	0
  1269  0662  00F7               	movwf	msDelay@count+1
  1270  0663  2027               	fcall	_msDelay
  1271  0664  0008               	return
  1272  0665                     __end_of_diagonalPattern:	
  1273                           
  1274                           	psect	text4
  1275  02AC                     __ptext4:	
  1276 ;; *************** function _alternateDouble *****************
  1277 ;; Defined at:
  1278 ;;		line 400 in file "cFlasher.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  multiplier      2   11[COMMON] int 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0, pclath, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1
  1292 ;;      Params:         2       0       0
  1293 ;;      Locals:         0       0       0
  1294 ;;      Temps:          0       2       0
  1295 ;;      Totals:         2       2       0
  1296 ;;Total ram usage:        4 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    1
  1299 ;; This function calls:
  1300 ;;		___wmul
  1301 ;;		_msDelay
  1302 ;;		_turnOffAll
  1303 ;; This function is called by:
  1304 ;;		_patternTwo
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           
  1309                           ;psect for function _alternateDouble
  1310  02AC                     _alternateDouble:	
  1311                           
  1312                           ;cFlasher.c: 402: turnOffAll();
  1313                           
  1314                           ;incstack = 0
  1315                           ; Regs used in _alternateDouble: [wreg+status,2+status,0+pclath+cstack]
  1316  02AC  2003               	fcall	_turnOffAll
  1317                           
  1318                           ;cFlasher.c: 403: msDelay(150 - multiplier * 30);
  1319  02AD  087C               	movf	alternateDouble@multiplier+1,w
  1320  02AE  00F1               	movwf	___wmul@multiplier+1
  1321  02AF  087B               	movf	alternateDouble@multiplier,w
  1322  02B0  00F0               	movwf	___wmul@multiplier
  1323  02B1  301E               	movlw	30
  1324  02B2  00F2               	movwf	___wmul@multiplicand
  1325  02B3  3000               	movlw	0
  1326  02B4  00F3               	movwf	___wmul@multiplicand+1
  1327  02B5  2076               	fcall	___wmul
  1328  02B6  0970               	comf	?___wmul,w
  1329  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  1330  02B8  00A0               	movwf	??_alternateDouble
  1331  02B9  0971               	comf	?___wmul+1,w
  1332  02BA  00A1               	movwf	??_alternateDouble+1
  1333  02BB  0AA0               	incf	??_alternateDouble,f
  1334  02BC  1903               	skipnz
  1335  02BD  0AA1               	incf	??_alternateDouble+1,f
  1336  02BE  0820               	movf	??_alternateDouble,w
  1337  02BF  3E96               	addlw	150
  1338  02C0  00F6               	movwf	msDelay@count
  1339  02C1  0821               	movf	??_alternateDouble+1,w
  1340  02C2  1803               	skipnc
  1341  02C3  3E01               	addlw	1
  1342  02C4  3E00               	addlw	0
  1343  02C5  00F7               	movwf	msDelay@count+1
  1344  02C6  2027               	fcall	_msDelay
  1345                           
  1346                           ;cFlasher.c: 404: PORTC = 0b000001 | 0b000010;
  1347  02C7  3003               	movlw	3
  1348  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  1349  02C9  0087               	movwf	7	;volatile
  1350                           
  1351                           ;cFlasher.c: 405: msDelay(150 - multiplier * 30);
  1352  02CA  087C               	movf	alternateDouble@multiplier+1,w
  1353  02CB  00F1               	movwf	___wmul@multiplier+1
  1354  02CC  087B               	movf	alternateDouble@multiplier,w
  1355  02CD  00F0               	movwf	___wmul@multiplier
  1356  02CE  301E               	movlw	30
  1357  02CF  00F2               	movwf	___wmul@multiplicand
  1358  02D0  3000               	movlw	0
  1359  02D1  00F3               	movwf	___wmul@multiplicand+1
  1360  02D2  2076               	fcall	___wmul
  1361  02D3  0970               	comf	?___wmul,w
  1362  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  1363  02D5  00A0               	movwf	??_alternateDouble
  1364  02D6  0971               	comf	?___wmul+1,w
  1365  02D7  00A1               	movwf	??_alternateDouble+1
  1366  02D8  0AA0               	incf	??_alternateDouble,f
  1367  02D9  1903               	skipnz
  1368  02DA  0AA1               	incf	??_alternateDouble+1,f
  1369  02DB  0820               	movf	??_alternateDouble,w
  1370  02DC  3E96               	addlw	150
  1371  02DD  00F6               	movwf	msDelay@count
  1372  02DE  0821               	movf	??_alternateDouble+1,w
  1373  02DF  1803               	skipnc
  1374  02E0  3E01               	addlw	1
  1375  02E1  3E00               	addlw	0
  1376  02E2  00F7               	movwf	msDelay@count+1
  1377  02E3  2027               	fcall	_msDelay
  1378                           
  1379                           ;cFlasher.c: 406: PORTC = 0b000010 | 0b000100;
  1380  02E4  3006               	movlw	6
  1381  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  1382  02E6  0087               	movwf	7	;volatile
  1383                           
  1384                           ;cFlasher.c: 407: msDelay(150 - multiplier * 30);
  1385  02E7  087C               	movf	alternateDouble@multiplier+1,w
  1386  02E8  00F1               	movwf	___wmul@multiplier+1
  1387  02E9  087B               	movf	alternateDouble@multiplier,w
  1388  02EA  00F0               	movwf	___wmul@multiplier
  1389  02EB  301E               	movlw	30
  1390  02EC  00F2               	movwf	___wmul@multiplicand
  1391  02ED  3000               	movlw	0
  1392  02EE  00F3               	movwf	___wmul@multiplicand+1
  1393  02EF  2076               	fcall	___wmul
  1394  02F0  0970               	comf	?___wmul,w
  1395  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  1396  02F2  00A0               	movwf	??_alternateDouble
  1397  02F3  0971               	comf	?___wmul+1,w
  1398  02F4  00A1               	movwf	??_alternateDouble+1
  1399  02F5  0AA0               	incf	??_alternateDouble,f
  1400  02F6  1903               	skipnz
  1401  02F7  0AA1               	incf	??_alternateDouble+1,f
  1402  02F8  0820               	movf	??_alternateDouble,w
  1403  02F9  3E96               	addlw	150
  1404  02FA  00F6               	movwf	msDelay@count
  1405  02FB  0821               	movf	??_alternateDouble+1,w
  1406  02FC  1803               	skipnc
  1407  02FD  3E01               	addlw	1
  1408  02FE  3E00               	addlw	0
  1409  02FF  00F7               	movwf	msDelay@count+1
  1410  0300  2027               	fcall	_msDelay
  1411                           
  1412                           ;cFlasher.c: 408: PORTC = 0b000100 | 0b001000;
  1413  0301  300C               	movlw	12
  1414  0302  1283               	bcf	3,5	;RP0=0, select bank0
  1415  0303  0087               	movwf	7	;volatile
  1416                           
  1417                           ;cFlasher.c: 409: msDelay(150 - multiplier * 30);
  1418  0304  087C               	movf	alternateDouble@multiplier+1,w
  1419  0305  00F1               	movwf	___wmul@multiplier+1
  1420  0306  087B               	movf	alternateDouble@multiplier,w
  1421  0307  00F0               	movwf	___wmul@multiplier
  1422  0308  301E               	movlw	30
  1423  0309  00F2               	movwf	___wmul@multiplicand
  1424  030A  3000               	movlw	0
  1425  030B  00F3               	movwf	___wmul@multiplicand+1
  1426  030C  2076               	fcall	___wmul
  1427  030D  0970               	comf	?___wmul,w
  1428  030E  1283               	bcf	3,5	;RP0=0, select bank0
  1429  030F  00A0               	movwf	??_alternateDouble
  1430  0310  0971               	comf	?___wmul+1,w
  1431  0311  00A1               	movwf	??_alternateDouble+1
  1432  0312  0AA0               	incf	??_alternateDouble,f
  1433  0313  1903               	skipnz
  1434  0314  0AA1               	incf	??_alternateDouble+1,f
  1435  0315  0820               	movf	??_alternateDouble,w
  1436  0316  3E96               	addlw	150
  1437  0317  00F6               	movwf	msDelay@count
  1438  0318  0821               	movf	??_alternateDouble+1,w
  1439  0319  1803               	skipnc
  1440  031A  3E01               	addlw	1
  1441  031B  3E00               	addlw	0
  1442  031C  00F7               	movwf	msDelay@count+1
  1443  031D  2027               	fcall	_msDelay
  1444                           
  1445                           ;cFlasher.c: 410: PORTC = 0b001000 | 0b010000;
  1446  031E  3018               	movlw	24
  1447  031F  1283               	bcf	3,5	;RP0=0, select bank0
  1448  0320  0087               	movwf	7	;volatile
  1449                           
  1450                           ;cFlasher.c: 411: msDelay(150 - multiplier * 30);
  1451  0321  087C               	movf	alternateDouble@multiplier+1,w
  1452  0322  00F1               	movwf	___wmul@multiplier+1
  1453  0323  087B               	movf	alternateDouble@multiplier,w
  1454  0324  00F0               	movwf	___wmul@multiplier
  1455  0325  301E               	movlw	30
  1456  0326  00F2               	movwf	___wmul@multiplicand
  1457  0327  3000               	movlw	0
  1458  0328  00F3               	movwf	___wmul@multiplicand+1
  1459  0329  2076               	fcall	___wmul
  1460  032A  0970               	comf	?___wmul,w
  1461  032B  1283               	bcf	3,5	;RP0=0, select bank0
  1462  032C  00A0               	movwf	??_alternateDouble
  1463  032D  0971               	comf	?___wmul+1,w
  1464  032E  00A1               	movwf	??_alternateDouble+1
  1465  032F  0AA0               	incf	??_alternateDouble,f
  1466  0330  1903               	skipnz
  1467  0331  0AA1               	incf	??_alternateDouble+1,f
  1468  0332  0820               	movf	??_alternateDouble,w
  1469  0333  3E96               	addlw	150
  1470  0334  00F6               	movwf	msDelay@count
  1471  0335  0821               	movf	??_alternateDouble+1,w
  1472  0336  1803               	skipnc
  1473  0337  3E01               	addlw	1
  1474  0338  3E00               	addlw	0
  1475  0339  00F7               	movwf	msDelay@count+1
  1476  033A  2027               	fcall	_msDelay
  1477                           
  1478                           ;cFlasher.c: 412: PORTC = 0b010000 | 0b100000;
  1479  033B  3030               	movlw	48
  1480  033C  1283               	bcf	3,5	;RP0=0, select bank0
  1481  033D  0087               	movwf	7	;volatile
  1482                           
  1483                           ;cFlasher.c: 413: msDelay(150 - multiplier * 30);
  1484  033E  087C               	movf	alternateDouble@multiplier+1,w
  1485  033F  00F1               	movwf	___wmul@multiplier+1
  1486  0340  087B               	movf	alternateDouble@multiplier,w
  1487  0341  00F0               	movwf	___wmul@multiplier
  1488  0342  301E               	movlw	30
  1489  0343  00F2               	movwf	___wmul@multiplicand
  1490  0344  3000               	movlw	0
  1491  0345  00F3               	movwf	___wmul@multiplicand+1
  1492  0346  2076               	fcall	___wmul
  1493  0347  0970               	comf	?___wmul,w
  1494  0348  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0349  00A0               	movwf	??_alternateDouble
  1496  034A  0971               	comf	?___wmul+1,w
  1497  034B  00A1               	movwf	??_alternateDouble+1
  1498  034C  0AA0               	incf	??_alternateDouble,f
  1499  034D  1903               	skipnz
  1500  034E  0AA1               	incf	??_alternateDouble+1,f
  1501  034F  0820               	movf	??_alternateDouble,w
  1502  0350  3E96               	addlw	150
  1503  0351  00F6               	movwf	msDelay@count
  1504  0352  0821               	movf	??_alternateDouble+1,w
  1505  0353  1803               	skipnc
  1506  0354  3E01               	addlw	1
  1507  0355  3E00               	addlw	0
  1508  0356  00F7               	movwf	msDelay@count+1
  1509  0357  2027               	fcall	_msDelay
  1510                           
  1511                           ;cFlasher.c: 414: PORTC = 0b000001 | 0b100000;
  1512  0358  3021               	movlw	33
  1513  0359  1283               	bcf	3,5	;RP0=0, select bank0
  1514  035A  0087               	movwf	7	;volatile
  1515                           
  1516                           ;cFlasher.c: 415: msDelay(150 - multiplier * 30);
  1517  035B  087C               	movf	alternateDouble@multiplier+1,w
  1518  035C  00F1               	movwf	___wmul@multiplier+1
  1519  035D  087B               	movf	alternateDouble@multiplier,w
  1520  035E  00F0               	movwf	___wmul@multiplier
  1521  035F  301E               	movlw	30
  1522  0360  00F2               	movwf	___wmul@multiplicand
  1523  0361  3000               	movlw	0
  1524  0362  00F3               	movwf	___wmul@multiplicand+1
  1525  0363  2076               	fcall	___wmul
  1526  0364  0970               	comf	?___wmul,w
  1527  0365  1283               	bcf	3,5	;RP0=0, select bank0
  1528  0366  00A0               	movwf	??_alternateDouble
  1529  0367  0971               	comf	?___wmul+1,w
  1530  0368  00A1               	movwf	??_alternateDouble+1
  1531  0369  0AA0               	incf	??_alternateDouble,f
  1532  036A  1903               	skipnz
  1533  036B  0AA1               	incf	??_alternateDouble+1,f
  1534  036C  0820               	movf	??_alternateDouble,w
  1535  036D  3E96               	addlw	150
  1536  036E  00F6               	movwf	msDelay@count
  1537  036F  0821               	movf	??_alternateDouble+1,w
  1538  0370  1803               	skipnc
  1539  0371  3E01               	addlw	1
  1540  0372  3E00               	addlw	0
  1541  0373  00F7               	movwf	msDelay@count+1
  1542  0374  2027               	fcall	_msDelay
  1543  0375  0008               	return
  1544  0376                     __end_of_alternateDouble:	
  1545                           
  1546                           	psect	text5
  1547  01A2                     __ptext5:	
  1548 ;; *************** function _patternOne *****************
  1549 ;; Defined at:
  1550 ;;		line 183 in file "cFlasher.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;		None
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;  j               2    6[BANK0 ] int 
  1555 ;;  i               2    4[BANK0 ] int 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMMON   BANK0   BANK1
  1565 ;;      Params:         0       0       0
  1566 ;;      Locals:         0       4       0
  1567 ;;      Temps:          0       0       0
  1568 ;;      Totals:         0       4       0
  1569 ;;Total ram usage:        4 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; Hardware stack levels required when called:    2
  1572 ;; This function calls:
  1573 ;;		_circlePattern
  1574 ;;		_crash
  1575 ;;		_doublePattern
  1576 ;;		_endToEnd
  1577 ;;		_flashAllOn
  1578 ;;		_flashAlternating
  1579 ;;		_rotateDouble
  1580 ;;		_swipe
  1581 ;;		_turnOnAll
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           
  1588                           ;psect for function _patternOne
  1589  01A2                     _patternOne:	
  1590                           
  1591                           ;cFlasher.c: 185: for(int i = 0; i < 3; i++) {
  1592                           
  1593                           ;incstack = 0
  1594                           ; Regs used in _patternOne: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1595  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1596  01A3  01A4               	clrf	patternOne@i
  1597  01A4  01A5               	clrf	patternOne@i+1
  1598  01A5  0825               	movf	patternOne@i+1,w
  1599  01A6  3A80               	xorlw	128
  1600  01A7  00FF               	movwf	127
  1601  01A8  3080               	movlw	128
  1602  01A9  027F               	subwf	127,w
  1603  01AA  1D03               	skipz
  1604  01AB  29AE               	goto	u455
  1605  01AC  3003               	movlw	3
  1606  01AD  0224               	subwf	patternOne@i,w
  1607  01AE                     u455:	
  1608  01AE  1803               	btfsc	3,0
  1609  01AF  29F0               	goto	l1543
  1610  01B0                     l1523:	
  1611                           
  1612                           ;cFlasher.c: 186: circlePattern(i);
  1613  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  1614  01B1  0825               	movf	patternOne@i+1,w
  1615  01B2  00FC               	movwf	circlePattern@multiplier+1
  1616  01B3  0824               	movf	patternOne@i,w
  1617  01B4  00FB               	movwf	circlePattern@multiplier
  1618  01B5  2665               	fcall	_circlePattern
  1619                           
  1620                           ;cFlasher.c: 187: for (int j = 0; j < 3; j++) {
  1621  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1622  01B7  01A6               	clrf	patternOne@j
  1623  01B8  01A7               	clrf	patternOne@j+1
  1624  01B9  0827               	movf	patternOne@j+1,w
  1625  01BA  3A80               	xorlw	128
  1626  01BB  00FF               	movwf	127
  1627  01BC  3080               	movlw	128
  1628  01BD  027F               	subwf	127,w
  1629  01BE  1D03               	skipz
  1630  01BF  29C2               	goto	u465
  1631  01C0  3003               	movlw	3
  1632  01C1  0226               	subwf	patternOne@j,w
  1633  01C2                     u465:	
  1634  01C2  1803               	btfsc	3,0
  1635  01C3  29DD               	goto	l1537
  1636  01C4                     l1531:	
  1637                           
  1638                           ;cFlasher.c: 188: circlePattern(j);
  1639  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1640  01C5  0827               	movf	patternOne@j+1,w
  1641  01C6  00FC               	movwf	circlePattern@multiplier+1
  1642  01C7  0826               	movf	patternOne@j,w
  1643  01C8  00FB               	movwf	circlePattern@multiplier
  1644  01C9  2665               	fcall	_circlePattern
  1645                           
  1646                           ;cFlasher.c: 189: turnOnAll();
  1647  01CA  2007               	fcall	_turnOnAll
  1648  01CB  3001               	movlw	1
  1649  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1650  01CD  07A6               	addwf	patternOne@j,f
  1651  01CE  1803               	skipnc
  1652  01CF  0AA7               	incf	patternOne@j+1,f
  1653  01D0  3000               	movlw	0
  1654  01D1  07A7               	addwf	patternOne@j+1,f
  1655  01D2  0827               	movf	patternOne@j+1,w
  1656  01D3  3A80               	xorlw	128
  1657  01D4  00FF               	movwf	127
  1658  01D5  3080               	movlw	128
  1659  01D6  027F               	subwf	127,w
  1660  01D7  1D03               	skipz
  1661  01D8  29DB               	goto	u475
  1662  01D9  3003               	movlw	3
  1663  01DA  0226               	subwf	patternOne@j,w
  1664  01DB                     u475:	
  1665  01DB  1C03               	skipc
  1666  01DC  29C4               	goto	l1531
  1667  01DD                     l1537:	
  1668                           
  1669                           ;cFlasher.c: 190: }
  1670                           ;cFlasher.c: 191: swipe();
  1671  01DD  20B9               	fcall	_swipe
  1672  01DE  3001               	movlw	1
  1673  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1674  01E0  07A4               	addwf	patternOne@i,f
  1675  01E1  1803               	skipnc
  1676  01E2  0AA5               	incf	patternOne@i+1,f
  1677  01E3  3000               	movlw	0
  1678  01E4  07A5               	addwf	patternOne@i+1,f
  1679  01E5  0825               	movf	patternOne@i+1,w
  1680  01E6  3A80               	xorlw	128
  1681  01E7  00FF               	movwf	127
  1682  01E8  3080               	movlw	128
  1683  01E9  027F               	subwf	127,w
  1684  01EA  1D03               	skipz
  1685  01EB  29EE               	goto	u485
  1686  01EC  3003               	movlw	3
  1687  01ED  0224               	subwf	patternOne@i,w
  1688  01EE                     u485:	
  1689  01EE  1C03               	skipc
  1690  01EF  29B0               	goto	l1523
  1691  01F0                     l1543:	
  1692                           
  1693                           ;cFlasher.c: 192: }
  1694                           ;cFlasher.c: 193: flashAllOn();
  1695  01F0  2097               	fcall	_flashAllOn
  1696                           
  1697                           ;cFlasher.c: 194: flashAlternating(0);
  1698  01F1  3000               	movlw	0
  1699  01F2  00FB               	movwf	flashAlternating@multiplier
  1700  01F3  00FC               	movwf	flashAlternating@multiplier+1
  1701  01F4  214C               	fcall	_flashAlternating
  1702                           
  1703                           ;cFlasher.c: 195: endToEnd();
  1704  01F5  2376               	fcall	_endToEnd
  1705                           
  1706                           ;cFlasher.c: 196: doublePattern();
  1707  01F6  203F               	fcall	_doublePattern
  1708                           
  1709                           ;cFlasher.c: 197: swipe();
  1710  01F7  20B9               	fcall	_swipe
  1711                           
  1712                           ;cFlasher.c: 198: endToEnd();
  1713  01F8  2376               	fcall	_endToEnd
  1714                           
  1715                           ;cFlasher.c: 199: rotateDouble(0);
  1716  01F9  3000               	movlw	0
  1717  01FA  00FB               	movwf	rotateDouble@multiplier
  1718  01FB  00FC               	movwf	rotateDouble@multiplier+1
  1719  01FC  2204               	fcall	_rotateDouble
  1720                           
  1721                           ;cFlasher.c: 200: swipe();
  1722  01FD  20B9               	fcall	_swipe
  1723                           
  1724                           ;cFlasher.c: 201: crash();
  1725  01FE  20FC               	fcall	_crash
  1726                           
  1727                           ;cFlasher.c: 202: rotateDouble(0);
  1728  01FF  3000               	movlw	0
  1729  0200  00FB               	movwf	rotateDouble@multiplier
  1730  0201  00FC               	movwf	rotateDouble@multiplier+1
  1731  0202  2204               	fcall	_rotateDouble
  1732  0203  0008               	return
  1733  0204                     __end_of_patternOne:	
  1734                           
  1735                           	psect	text6
  1736  00B9                     __ptext6:	
  1737 ;; *************** function _swipe *****************
  1738 ;; Defined at:
  1739 ;;		line 542 in file "cFlasher.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0, pclath, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMMON   BANK0   BANK1
  1753 ;;      Params:         0       0       0
  1754 ;;      Locals:         0       0       0
  1755 ;;      Temps:          0       0       0
  1756 ;;      Totals:         0       0       0
  1757 ;;Total ram usage:        0 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    1
  1760 ;; This function calls:
  1761 ;;		_msDelay
  1762 ;;		_turnOffAll
  1763 ;; This function is called by:
  1764 ;;		_patternOne
  1765 ;;		_patternTwo
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           
  1770                           ;psect for function _swipe
  1771  00B9                     _swipe:	
  1772                           
  1773                           ;cFlasher.c: 544: turnOffAll();
  1774                           
  1775                           ;incstack = 0
  1776                           ; Regs used in _swipe: [wreg+status,2+status,0+pclath+cstack]
  1777  00B9  2003               	fcall	_turnOffAll
  1778                           
  1779                           ;cFlasher.c: 545: msDelay(150);
  1780  00BA  3096               	movlw	150
  1781  00BB  00F6               	movwf	msDelay@count
  1782  00BC  3000               	movlw	0
  1783  00BD  00F7               	movwf	msDelay@count+1
  1784  00BE  2027               	fcall	_msDelay
  1785                           
  1786                           ;cFlasher.c: 546: PORTC = 0b000010 | 0b000100;
  1787  00BF  3006               	movlw	6
  1788  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1789  00C1  0087               	movwf	7	;volatile
  1790                           
  1791                           ;cFlasher.c: 547: msDelay(150);
  1792  00C2  3096               	movlw	150
  1793  00C3  00F6               	movwf	msDelay@count
  1794  00C4  3000               	movlw	0
  1795  00C5  00F7               	movwf	msDelay@count+1
  1796  00C6  2027               	fcall	_msDelay
  1797                           
  1798                           ;cFlasher.c: 548: PORTA = 0b000001 | 0b100000;
  1799  00C7  3021               	movlw	33
  1800  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1801  00C9  0085               	movwf	5	;volatile
  1802                           
  1803                           ;cFlasher.c: 549: PORTC = 0b000001 | 0b001000;
  1804  00CA  3009               	movlw	9
  1805  00CB  0087               	movwf	7	;volatile
  1806                           
  1807                           ;cFlasher.c: 550: msDelay(150);
  1808  00CC  3096               	movlw	150
  1809  00CD  00F6               	movwf	msDelay@count
  1810  00CE  3000               	movlw	0
  1811  00CF  00F7               	movwf	msDelay@count+1
  1812  00D0  2027               	fcall	_msDelay
  1813                           
  1814                           ;cFlasher.c: 551: PORTA = 0b000000;
  1815  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1816  00D2  0185               	clrf	5	;volatile
  1817                           
  1818                           ;cFlasher.c: 552: PORTC = 0b010000 | 0b100000;
  1819  00D3  3030               	movlw	48
  1820  00D4  0087               	movwf	7	;volatile
  1821                           
  1822                           ;cFlasher.c: 553: msDelay(150);
  1823  00D5  3096               	movlw	150
  1824  00D6  00F6               	movwf	msDelay@count
  1825  00D7  3000               	movlw	0
  1826  00D8  00F7               	movwf	msDelay@count+1
  1827  00D9  2027               	fcall	_msDelay
  1828                           
  1829                           ;cFlasher.c: 556: turnOffAll();
  1830  00DA  2003               	fcall	_turnOffAll
  1831                           
  1832                           ;cFlasher.c: 557: msDelay(150);
  1833  00DB  3096               	movlw	150
  1834  00DC  00F6               	movwf	msDelay@count
  1835  00DD  3000               	movlw	0
  1836  00DE  00F7               	movwf	msDelay@count+1
  1837  00DF  2027               	fcall	_msDelay
  1838                           
  1839                           ;cFlasher.c: 558: PORTC = 0b010000 | 0b100000;
  1840  00E0  3030               	movlw	48
  1841  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1842  00E2  0087               	movwf	7	;volatile
  1843                           
  1844                           ;cFlasher.c: 559: msDelay(150);
  1845  00E3  3096               	movlw	150
  1846  00E4  00F6               	movwf	msDelay@count
  1847  00E5  3000               	movlw	0
  1848  00E6  00F7               	movwf	msDelay@count+1
  1849  00E7  2027               	fcall	_msDelay
  1850                           
  1851                           ;cFlasher.c: 560: PORTA = 0b000001 | 0b100000;
  1852  00E8  3021               	movlw	33
  1853  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1854  00EA  0085               	movwf	5	;volatile
  1855                           
  1856                           ;cFlasher.c: 561: PORTC = 0b000001 | 0b001000;
  1857  00EB  3009               	movlw	9
  1858  00EC  0087               	movwf	7	;volatile
  1859                           
  1860                           ;cFlasher.c: 562: msDelay(150);
  1861  00ED  3096               	movlw	150
  1862  00EE  00F6               	movwf	msDelay@count
  1863  00EF  3000               	movlw	0
  1864  00F0  00F7               	movwf	msDelay@count+1
  1865  00F1  2027               	fcall	_msDelay
  1866                           
  1867                           ;cFlasher.c: 563: PORTA = 0b000000;
  1868  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1869  00F3  0185               	clrf	5	;volatile
  1870                           
  1871                           ;cFlasher.c: 564: PORTC = 0b000010 | 0b000100;
  1872  00F4  3006               	movlw	6
  1873  00F5  0087               	movwf	7	;volatile
  1874                           
  1875                           ;cFlasher.c: 565: msDelay(150);
  1876  00F6  3096               	movlw	150
  1877  00F7  00F6               	movwf	msDelay@count
  1878  00F8  3000               	movlw	0
  1879  00F9  00F7               	movwf	msDelay@count+1
  1880  00FA  2027               	fcall	_msDelay
  1881  00FB  0008               	return
  1882  00FC                     __end_of_swipe:	
  1883                           
  1884                           	psect	text7
  1885  0204                     __ptext7:	
  1886 ;; *************** function _rotateDouble *****************
  1887 ;; Defined at:
  1888 ;;		line 346 in file "cFlasher.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  multiplier      2   11[COMMON] int 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  k               2    2[BANK0 ] int 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMMON   BANK0   BANK1
  1902 ;;      Params:         2       0       0
  1903 ;;      Locals:         0       2       0
  1904 ;;      Temps:          0       2       0
  1905 ;;      Totals:         2       4       0
  1906 ;;Total ram usage:        6 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    1
  1909 ;; This function calls:
  1910 ;;		___wmul
  1911 ;;		_msDelay
  1912 ;; This function is called by:
  1913 ;;		_patternOne
  1914 ;;		_patternTwo
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           
  1919                           ;psect for function _rotateDouble
  1920  0204                     _rotateDouble:	
  1921                           
  1922                           ;cFlasher.c: 348: PORTA = 0b000001;
  1923                           
  1924                           ;incstack = 0
  1925                           ; Regs used in _rotateDouble: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1926  0204  3001               	movlw	1
  1927  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1928  0206  0085               	movwf	5	;volatile
  1929                           
  1930                           ;cFlasher.c: 349: PORTC = 0b000001;
  1931  0207  3001               	movlw	1
  1932  0208  0087               	movwf	7	;volatile
  1933                           
  1934                           ;cFlasher.c: 350: msDelay(150 - multiplier * 30);
  1935  0209  087C               	movf	rotateDouble@multiplier+1,w
  1936  020A  00F1               	movwf	___wmul@multiplier+1
  1937  020B  087B               	movf	rotateDouble@multiplier,w
  1938  020C  00F0               	movwf	___wmul@multiplier
  1939  020D  301E               	movlw	30
  1940  020E  00F2               	movwf	___wmul@multiplicand
  1941  020F  3000               	movlw	0
  1942  0210  00F3               	movwf	___wmul@multiplicand+1
  1943  0211  2076               	fcall	___wmul
  1944  0212  0970               	comf	?___wmul,w
  1945  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0214  00A0               	movwf	??_rotateDouble
  1947  0215  0971               	comf	?___wmul+1,w
  1948  0216  00A1               	movwf	??_rotateDouble+1
  1949  0217  0AA0               	incf	??_rotateDouble,f
  1950  0218  1903               	skipnz
  1951  0219  0AA1               	incf	??_rotateDouble+1,f
  1952  021A  0820               	movf	??_rotateDouble,w
  1953  021B  3E96               	addlw	150
  1954  021C  00F6               	movwf	msDelay@count
  1955  021D  0821               	movf	??_rotateDouble+1,w
  1956  021E  1803               	skipnc
  1957  021F  3E01               	addlw	1
  1958  0220  3E00               	addlw	0
  1959  0221  00F7               	movwf	msDelay@count+1
  1960  0222  2027               	fcall	_msDelay
  1961                           
  1962                           ;cFlasher.c: 351: PORTA = 0b000000;
  1963  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1964  0224  0185               	clrf	5	;volatile
  1965                           
  1966                           ;cFlasher.c: 352: PORTC = 0b000010 | 0b000100;
  1967  0225  3006               	movlw	6
  1968  0226  0087               	movwf	7	;volatile
  1969                           
  1970                           ;cFlasher.c: 353: msDelay(150 - multiplier * 30);
  1971  0227  087C               	movf	rotateDouble@multiplier+1,w
  1972  0228  00F1               	movwf	___wmul@multiplier+1
  1973  0229  087B               	movf	rotateDouble@multiplier,w
  1974  022A  00F0               	movwf	___wmul@multiplier
  1975  022B  301E               	movlw	30
  1976  022C  00F2               	movwf	___wmul@multiplicand
  1977  022D  3000               	movlw	0
  1978  022E  00F3               	movwf	___wmul@multiplicand+1
  1979  022F  2076               	fcall	___wmul
  1980  0230  0970               	comf	?___wmul,w
  1981  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1982  0232  00A0               	movwf	??_rotateDouble
  1983  0233  0971               	comf	?___wmul+1,w
  1984  0234  00A1               	movwf	??_rotateDouble+1
  1985  0235  0AA0               	incf	??_rotateDouble,f
  1986  0236  1903               	skipnz
  1987  0237  0AA1               	incf	??_rotateDouble+1,f
  1988  0238  0820               	movf	??_rotateDouble,w
  1989  0239  3E96               	addlw	150
  1990  023A  00F6               	movwf	msDelay@count
  1991  023B  0821               	movf	??_rotateDouble+1,w
  1992  023C  1803               	skipnc
  1993  023D  3E01               	addlw	1
  1994  023E  3E00               	addlw	0
  1995  023F  00F7               	movwf	msDelay@count+1
  1996  0240  2027               	fcall	_msDelay
  1997                           
  1998                           ;cFlasher.c: 354: PORTA = 0b100000;
  1999  0241  3020               	movlw	32
  2000  0242  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0243  0085               	movwf	5	;volatile
  2002                           
  2003                           ;cFlasher.c: 355: PORTC = 0b001000;
  2004  0244  3008               	movlw	8
  2005  0245  0087               	movwf	7	;volatile
  2006                           
  2007                           ;cFlasher.c: 356: msDelay(150 - multiplier * 30);
  2008  0246  087C               	movf	rotateDouble@multiplier+1,w
  2009  0247  00F1               	movwf	___wmul@multiplier+1
  2010  0248  087B               	movf	rotateDouble@multiplier,w
  2011  0249  00F0               	movwf	___wmul@multiplier
  2012  024A  301E               	movlw	30
  2013  024B  00F2               	movwf	___wmul@multiplicand
  2014  024C  3000               	movlw	0
  2015  024D  00F3               	movwf	___wmul@multiplicand+1
  2016  024E  2076               	fcall	___wmul
  2017  024F  0970               	comf	?___wmul,w
  2018  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2019  0251  00A0               	movwf	??_rotateDouble
  2020  0252  0971               	comf	?___wmul+1,w
  2021  0253  00A1               	movwf	??_rotateDouble+1
  2022  0254  0AA0               	incf	??_rotateDouble,f
  2023  0255  1903               	skipnz
  2024  0256  0AA1               	incf	??_rotateDouble+1,f
  2025  0257  0820               	movf	??_rotateDouble,w
  2026  0258  3E96               	addlw	150
  2027  0259  00F6               	movwf	msDelay@count
  2028  025A  0821               	movf	??_rotateDouble+1,w
  2029  025B  1803               	skipnc
  2030  025C  3E01               	addlw	1
  2031  025D  3E00               	addlw	0
  2032  025E  00F7               	movwf	msDelay@count+1
  2033  025F  2027               	fcall	_msDelay
  2034                           
  2035                           ;cFlasher.c: 357: PORTC = 0b010000 | 0b100000;
  2036  0260  3030               	movlw	48
  2037  0261  1283               	bcf	3,5	;RP0=0, select bank0
  2038  0262  0087               	movwf	7	;volatile
  2039                           
  2040                           ;cFlasher.c: 358: PORTA = 0b000000;
  2041  0263  0185               	clrf	5	;volatile
  2042                           
  2043                           ;cFlasher.c: 359: msDelay(150 - multiplier * 30);
  2044  0264  087C               	movf	rotateDouble@multiplier+1,w
  2045  0265  00F1               	movwf	___wmul@multiplier+1
  2046  0266  087B               	movf	rotateDouble@multiplier,w
  2047  0267  00F0               	movwf	___wmul@multiplier
  2048  0268  301E               	movlw	30
  2049  0269  00F2               	movwf	___wmul@multiplicand
  2050  026A  3000               	movlw	0
  2051  026B  00F3               	movwf	___wmul@multiplicand+1
  2052  026C  2076               	fcall	___wmul
  2053  026D  0970               	comf	?___wmul,w
  2054  026E  1283               	bcf	3,5	;RP0=0, select bank0
  2055  026F  00A0               	movwf	??_rotateDouble
  2056  0270  0971               	comf	?___wmul+1,w
  2057  0271  00A1               	movwf	??_rotateDouble+1
  2058  0272  0AA0               	incf	??_rotateDouble,f
  2059  0273  1903               	skipnz
  2060  0274  0AA1               	incf	??_rotateDouble+1,f
  2061  0275  0820               	movf	??_rotateDouble,w
  2062  0276  3E96               	addlw	150
  2063  0277  00F6               	movwf	msDelay@count
  2064  0278  0821               	movf	??_rotateDouble+1,w
  2065  0279  1803               	skipnc
  2066  027A  3E01               	addlw	1
  2067  027B  3E00               	addlw	0
  2068  027C  00F7               	movwf	msDelay@count+1
  2069  027D  2027               	fcall	_msDelay
  2070                           
  2071                           ;cFlasher.c: 361: for (int k = 0; k < 3; k++) {
  2072  027E  1283               	bcf	3,5	;RP0=0, select bank0
  2073  027F  01A2               	clrf	rotateDouble@k
  2074  0280  01A3               	clrf	rotateDouble@k+1
  2075  0281                     L1:	
  2076  0281  0823               	movf	rotateDouble@k+1,w
  2077  0282  3A80               	xorlw	128
  2078  0283  00FF               	movwf	127
  2079  0284  3080               	movlw	128
  2080  0285  027F               	subwf	127,w
  2081  0286  1D03               	skipz
  2082  0287  2A8A               	goto	u415
  2083  0288  3003               	movlw	3
  2084  0289  0222               	subwf	rotateDouble@k,w
  2085  028A                     u415:	
  2086  028A  1803               	btfsc	3,0
  2087  028B  0008               	return
  2088                           
  2089                           ;cFlasher.c: 362: PORTC = 0b000001 | 0b001000;
  2090  028C  3009               	movlw	9
  2091  028D  1283               	bcf	3,5	;RP0=0, select bank0
  2092  028E  0087               	movwf	7	;volatile
  2093                           
  2094                           ;cFlasher.c: 363: msDelay(100);
  2095  028F  3064               	movlw	100
  2096  0290  00F6               	movwf	msDelay@count
  2097  0291  3000               	movlw	0
  2098  0292  00F7               	movwf	msDelay@count+1
  2099  0293  2027               	fcall	_msDelay
  2100                           
  2101                           ;cFlasher.c: 364: PORTC = 0b000010 | 0b010000;
  2102  0294  3012               	movlw	18
  2103  0295  1283               	bcf	3,5	;RP0=0, select bank0
  2104  0296  0087               	movwf	7	;volatile
  2105                           
  2106                           ;cFlasher.c: 365: msDelay(100);
  2107  0297  3064               	movlw	100
  2108  0298  00F6               	movwf	msDelay@count
  2109  0299  3000               	movlw	0
  2110  029A  00F7               	movwf	msDelay@count+1
  2111  029B  2027               	fcall	_msDelay
  2112                           
  2113                           ;cFlasher.c: 366: PORTC = 0b000100 | 0b100000;
  2114  029C  3024               	movlw	36
  2115  029D  1283               	bcf	3,5	;RP0=0, select bank0
  2116  029E  0087               	movwf	7	;volatile
  2117                           
  2118                           ;cFlasher.c: 367: msDelay(100);
  2119  029F  3064               	movlw	100
  2120  02A0  00F6               	movwf	msDelay@count
  2121  02A1  3000               	movlw	0
  2122  02A2  00F7               	movwf	msDelay@count+1
  2123  02A3  2027               	fcall	_msDelay
  2124  02A4  3001               	movlw	1
  2125  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  2126  02A6  07A2               	addwf	rotateDouble@k,f
  2127  02A7  1803               	skipnc
  2128  02A8  0AA3               	incf	rotateDouble@k+1,f
  2129  02A9  3000               	movlw	0
  2130  02AA  07A3               	addwf	rotateDouble@k+1,f
  2131  02AB  2A81               	goto	L1
  2132  02AC                     __end_of_rotateDouble:	
  2133                           
  2134                           	psect	text8
  2135  014C                     __ptext8:	
  2136 ;; *************** function _flashAlternating *****************
  2137 ;; Defined at:
  2138 ;;		line 486 in file "cFlasher.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  multiplier      2   11[COMMON] int 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1
  2152 ;;      Params:         2       0       0
  2153 ;;      Locals:         0       0       0
  2154 ;;      Temps:          0       2       0
  2155 ;;      Totals:         2       2       0
  2156 ;;Total ram usage:        4 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    1
  2159 ;; This function calls:
  2160 ;;		___wmul
  2161 ;;		_msDelay
  2162 ;;		_turnOffAll
  2163 ;; This function is called by:
  2164 ;;		_patternOne
  2165 ;;		_patternTwo
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           
  2170                           ;psect for function _flashAlternating
  2171  014C                     _flashAlternating:	
  2172                           
  2173                           ;cFlasher.c: 488: turnOffAll();
  2174                           
  2175                           ;incstack = 0
  2176                           ; Regs used in _flashAlternating: [wreg+status,2+status,0+pclath+cstack]
  2177  014C  2003               	fcall	_turnOffAll
  2178                           
  2179                           ;cFlasher.c: 489: msDelay(150 - multiplier * 30);
  2180  014D  087C               	movf	flashAlternating@multiplier+1,w
  2181  014E  00F1               	movwf	___wmul@multiplier+1
  2182  014F  087B               	movf	flashAlternating@multiplier,w
  2183  0150  00F0               	movwf	___wmul@multiplier
  2184  0151  301E               	movlw	30
  2185  0152  00F2               	movwf	___wmul@multiplicand
  2186  0153  3000               	movlw	0
  2187  0154  00F3               	movwf	___wmul@multiplicand+1
  2188  0155  2076               	fcall	___wmul
  2189  0156  0970               	comf	?___wmul,w
  2190  0157  1283               	bcf	3,5	;RP0=0, select bank0
  2191  0158  00A0               	movwf	??_flashAlternating
  2192  0159  0971               	comf	?___wmul+1,w
  2193  015A  00A1               	movwf	??_flashAlternating+1
  2194  015B  0AA0               	incf	??_flashAlternating,f
  2195  015C  1903               	skipnz
  2196  015D  0AA1               	incf	??_flashAlternating+1,f
  2197  015E  0820               	movf	??_flashAlternating,w
  2198  015F  3E96               	addlw	150
  2199  0160  00F6               	movwf	msDelay@count
  2200  0161  0821               	movf	??_flashAlternating+1,w
  2201  0162  1803               	skipnc
  2202  0163  3E01               	addlw	1
  2203  0164  3E00               	addlw	0
  2204  0165  00F7               	movwf	msDelay@count+1
  2205  0166  2027               	fcall	_msDelay
  2206                           
  2207                           ;cFlasher.c: 490: PORTC = 0b000001 | 0b000100 | 0b010000;
  2208  0167  3015               	movlw	21
  2209  0168  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0169  0087               	movwf	7	;volatile
  2211                           
  2212                           ;cFlasher.c: 491: msDelay(150 - multiplier * 30);
  2213  016A  087C               	movf	flashAlternating@multiplier+1,w
  2214  016B  00F1               	movwf	___wmul@multiplier+1
  2215  016C  087B               	movf	flashAlternating@multiplier,w
  2216  016D  00F0               	movwf	___wmul@multiplier
  2217  016E  301E               	movlw	30
  2218  016F  00F2               	movwf	___wmul@multiplicand
  2219  0170  3000               	movlw	0
  2220  0171  00F3               	movwf	___wmul@multiplicand+1
  2221  0172  2076               	fcall	___wmul
  2222  0173  0970               	comf	?___wmul,w
  2223  0174  1283               	bcf	3,5	;RP0=0, select bank0
  2224  0175  00A0               	movwf	??_flashAlternating
  2225  0176  0971               	comf	?___wmul+1,w
  2226  0177  00A1               	movwf	??_flashAlternating+1
  2227  0178  0AA0               	incf	??_flashAlternating,f
  2228  0179  1903               	skipnz
  2229  017A  0AA1               	incf	??_flashAlternating+1,f
  2230  017B  0820               	movf	??_flashAlternating,w
  2231  017C  3E96               	addlw	150
  2232  017D  00F6               	movwf	msDelay@count
  2233  017E  0821               	movf	??_flashAlternating+1,w
  2234  017F  1803               	skipnc
  2235  0180  3E01               	addlw	1
  2236  0181  3E00               	addlw	0
  2237  0182  00F7               	movwf	msDelay@count+1
  2238  0183  2027               	fcall	_msDelay
  2239                           
  2240                           ;cFlasher.c: 492: PORTC = 0b000010 | 0b001000 | 0b100000;
  2241  0184  302A               	movlw	42
  2242  0185  1283               	bcf	3,5	;RP0=0, select bank0
  2243  0186  0087               	movwf	7	;volatile
  2244                           
  2245                           ;cFlasher.c: 493: msDelay(150 - multiplier * 30);
  2246  0187  087C               	movf	flashAlternating@multiplier+1,w
  2247  0188  00F1               	movwf	___wmul@multiplier+1
  2248  0189  087B               	movf	flashAlternating@multiplier,w
  2249  018A  00F0               	movwf	___wmul@multiplier
  2250  018B  301E               	movlw	30
  2251  018C  00F2               	movwf	___wmul@multiplicand
  2252  018D  3000               	movlw	0
  2253  018E  00F3               	movwf	___wmul@multiplicand+1
  2254  018F  2076               	fcall	___wmul
  2255  0190  0970               	comf	?___wmul,w
  2256  0191  1283               	bcf	3,5	;RP0=0, select bank0
  2257  0192  00A0               	movwf	??_flashAlternating
  2258  0193  0971               	comf	?___wmul+1,w
  2259  0194  00A1               	movwf	??_flashAlternating+1
  2260  0195  0AA0               	incf	??_flashAlternating,f
  2261  0196  1903               	skipnz
  2262  0197  0AA1               	incf	??_flashAlternating+1,f
  2263  0198  0820               	movf	??_flashAlternating,w
  2264  0199  3E96               	addlw	150
  2265  019A  00F6               	movwf	msDelay@count
  2266  019B  0821               	movf	??_flashAlternating+1,w
  2267  019C  1803               	skipnc
  2268  019D  3E01               	addlw	1
  2269  019E  3E00               	addlw	0
  2270  019F  00F7               	movwf	msDelay@count+1
  2271  01A0  2027               	fcall	_msDelay
  2272  01A1  0008               	return
  2273  01A2                     __end_of_flashAlternating:	
  2274                           
  2275                           	psect	text9
  2276  0097                     __ptext9:	
  2277 ;; *************** function _flashAllOn *****************
  2278 ;; Defined at:
  2279 ;;		line 469 in file "cFlasher.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;  k               2   11[COMMON] int 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1
  2293 ;;      Params:         0       0       0
  2294 ;;      Locals:         2       0       0
  2295 ;;      Temps:          0       0       0
  2296 ;;      Totals:         2       0       0
  2297 ;;Total ram usage:        2 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    1
  2300 ;; This function calls:
  2301 ;;		_msDelay
  2302 ;;		_turnOffAll
  2303 ;;		_turnOnAll
  2304 ;; This function is called by:
  2305 ;;		_patternOne
  2306 ;;		_patternTwo
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           
  2311                           ;psect for function _flashAllOn
  2312  0097                     _flashAllOn:	
  2313                           
  2314                           ;cFlasher.c: 470: for (int k = 300; k > 30; k -= 30) {
  2315                           
  2316                           ;incstack = 0
  2317                           ; Regs used in _flashAllOn: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2318  0097  302C               	movlw	44
  2319  0098  00FB               	movwf	flashAllOn@k
  2320  0099  3001               	movlw	1
  2321  009A  00FC               	movwf	flashAllOn@k+1
  2322  009B                     L2:	
  2323  009B  087C               	movf	flashAllOn@k+1,w
  2324  009C  3A80               	xorlw	128
  2325  009D  00FF               	movwf	127
  2326  009E  3080               	movlw	128
  2327  009F  027F               	subwf	127,w
  2328  00A0  1D03               	skipz
  2329  00A1  28A4               	goto	u395
  2330  00A2  301F               	movlw	31
  2331  00A3  027B               	subwf	flashAllOn@k,w
  2332  00A4                     u395:	
  2333  00A4  1C03               	btfss	3,0
  2334  00A5  0008               	return
  2335                           
  2336                           ;cFlasher.c: 471: turnOnAll();
  2337  00A6  2007               	fcall	_turnOnAll
  2338                           
  2339                           ;cFlasher.c: 472: msDelay(k);
  2340  00A7  087C               	movf	flashAllOn@k+1,w
  2341  00A8  00F7               	movwf	msDelay@count+1
  2342  00A9  087B               	movf	flashAllOn@k,w
  2343  00AA  00F6               	movwf	msDelay@count
  2344  00AB  2027               	fcall	_msDelay
  2345                           
  2346                           ;cFlasher.c: 473: turnOffAll();
  2347  00AC  2003               	fcall	_turnOffAll
  2348                           
  2349                           ;cFlasher.c: 474: msDelay(k);
  2350  00AD  087C               	movf	flashAllOn@k+1,w
  2351  00AE  00F7               	movwf	msDelay@count+1
  2352  00AF  087B               	movf	flashAllOn@k,w
  2353  00B0  00F6               	movwf	msDelay@count
  2354  00B1  2027               	fcall	_msDelay
  2355  00B2  30E2               	movlw	226
  2356  00B3  07FB               	addwf	flashAllOn@k,f
  2357  00B4  1803               	skipnc
  2358  00B5  0AFC               	incf	flashAllOn@k+1,f
  2359  00B6  30FF               	movlw	255
  2360  00B7  07FC               	addwf	flashAllOn@k+1,f
  2361  00B8  289B               	goto	L2
  2362  00B9                     __end_of_flashAllOn:	
  2363                           
  2364                           	psect	text10
  2365  0007                     __ptext10:	
  2366 ;; *************** function _turnOnAll *****************
  2367 ;; Defined at:
  2368 ;;		line 156 in file "cFlasher.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMMON   BANK0   BANK1
  2382 ;;      Params:         0       0       0
  2383 ;;      Locals:         0       0       0
  2384 ;;      Temps:          0       0       0
  2385 ;;      Totals:         0       0       0
  2386 ;;Total ram usage:        0 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_patternOne
  2392 ;;		_patternTwo
  2393 ;;		_flashAllOn
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           
  2398                           ;psect for function _turnOnAll
  2399  0007                     _turnOnAll:	
  2400                           
  2401                           ;cFlasher.c: 158: PORTA = 0b000001 | 0b100000;
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _turnOnAll: [wreg]
  2405  0007  3021               	movlw	33
  2406  0008  1283               	bcf	3,5	;RP0=0, select bank0
  2407  0009  0085               	movwf	5	;volatile
  2408                           
  2409                           ;cFlasher.c: 159: PORTC = 0b000001 | 0b000010 | 0b000100 | 0b001000 | 0b010000 | 0b10000
      +                          0;
  2410  000A  303F               	movlw	63
  2411  000B  0087               	movwf	7	;volatile
  2412  000C  0008               	return
  2413  000D                     __end_of_turnOnAll:	
  2414                           
  2415                           	psect	text11
  2416  0376                     __ptext11:	
  2417 ;; *************** function _endToEnd *****************
  2418 ;; Defined at:
  2419 ;;		line 257 in file "cFlasher.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;		None
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;		None
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0, pclath, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMMON   BANK0   BANK1
  2433 ;;      Params:         0       0       0
  2434 ;;      Locals:         0       0       0
  2435 ;;      Temps:          0       0       0
  2436 ;;      Totals:         0       0       0
  2437 ;;Total ram usage:        0 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    1
  2440 ;; This function calls:
  2441 ;;		_msDelay
  2442 ;; This function is called by:
  2443 ;;		_patternOne
  2444 ;;		_patternTwo
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function _endToEnd
  2450  0376                     _endToEnd:	
  2451                           
  2452                           ;cFlasher.c: 259: PORTA = 0b000001;
  2453                           
  2454                           ;incstack = 0
  2455                           ; Regs used in _endToEnd: [wreg+status,2+status,0+pclath+cstack]
  2456  0376  3001               	movlw	1
  2457  0377  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0378  0085               	movwf	5	;volatile
  2459                           
  2460                           ;cFlasher.c: 260: PORTC = 0b000000;
  2461  0379  0187               	clrf	7	;volatile
  2462                           
  2463                           ;cFlasher.c: 261: msDelay(100);
  2464  037A  3064               	movlw	100
  2465  037B  00F6               	movwf	msDelay@count
  2466  037C  3000               	movlw	0
  2467  037D  00F7               	movwf	msDelay@count+1
  2468  037E  2027               	fcall	_msDelay
  2469                           
  2470                           ;cFlasher.c: 262: PORTC = 0b000001;
  2471  037F  3001               	movlw	1
  2472  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0381  0087               	movwf	7	;volatile
  2474                           
  2475                           ;cFlasher.c: 263: msDelay(100);
  2476  0382  3064               	movlw	100
  2477  0383  00F6               	movwf	msDelay@count
  2478  0384  3000               	movlw	0
  2479  0385  00F7               	movwf	msDelay@count+1
  2480  0386  2027               	fcall	_msDelay
  2481                           
  2482                           ;cFlasher.c: 264: PORTC = 0b000001 | 0b000010;
  2483  0387  3003               	movlw	3
  2484  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0389  0087               	movwf	7	;volatile
  2486                           
  2487                           ;cFlasher.c: 265: PORTA = 0b000000;
  2488  038A  0185               	clrf	5	;volatile
  2489                           
  2490                           ;cFlasher.c: 266: msDelay(100);
  2491  038B  3064               	movlw	100
  2492  038C  00F6               	movwf	msDelay@count
  2493  038D  3000               	movlw	0
  2494  038E  00F7               	movwf	msDelay@count+1
  2495  038F  2027               	fcall	_msDelay
  2496                           
  2497                           ;cFlasher.c: 267: PORTC = 0b000010 | 0b000100;
  2498  0390  3006               	movlw	6
  2499  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2500  0392  0087               	movwf	7	;volatile
  2501                           
  2502                           ;cFlasher.c: 268: msDelay(100);
  2503  0393  3064               	movlw	100
  2504  0394  00F6               	movwf	msDelay@count
  2505  0395  3000               	movlw	0
  2506  0396  00F7               	movwf	msDelay@count+1
  2507  0397  2027               	fcall	_msDelay
  2508                           
  2509                           ;cFlasher.c: 269: PORTC = 0b000100 | 0b001000;
  2510  0398  300C               	movlw	12
  2511  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2512  039A  0087               	movwf	7	;volatile
  2513                           
  2514                           ;cFlasher.c: 270: msDelay(100);
  2515  039B  3064               	movlw	100
  2516  039C  00F6               	movwf	msDelay@count
  2517  039D  3000               	movlw	0
  2518  039E  00F7               	movwf	msDelay@count+1
  2519  039F  2027               	fcall	_msDelay
  2520                           
  2521                           ;cFlasher.c: 271: PORTC = 0b001000;
  2522  03A0  3008               	movlw	8
  2523  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2524  03A2  0087               	movwf	7	;volatile
  2525                           
  2526                           ;cFlasher.c: 272: PORTA = 0b100000;
  2527  03A3  3020               	movlw	32
  2528  03A4  0085               	movwf	5	;volatile
  2529                           
  2530                           ;cFlasher.c: 273: msDelay(100);
  2531  03A5  3064               	movlw	100
  2532  03A6  00F6               	movwf	msDelay@count
  2533  03A7  3000               	movlw	0
  2534  03A8  00F7               	movwf	msDelay@count+1
  2535  03A9  2027               	fcall	_msDelay
  2536                           
  2537                           ;cFlasher.c: 274: PORTC = 0b000000;
  2538  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2539  03AB  0187               	clrf	7	;volatile
  2540                           
  2541                           ;cFlasher.c: 275: msDelay(100);
  2542  03AC  3064               	movlw	100
  2543  03AD  00F6               	movwf	msDelay@count
  2544  03AE  3000               	movlw	0
  2545  03AF  00F7               	movwf	msDelay@count+1
  2546  03B0  2027               	fcall	_msDelay
  2547                           
  2548                           ;cFlasher.c: 276: PORTC = 0b001000;
  2549  03B1  3008               	movlw	8
  2550  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2551  03B3  0087               	movwf	7	;volatile
  2552                           
  2553                           ;cFlasher.c: 277: msDelay(100);
  2554  03B4  3064               	movlw	100
  2555  03B5  00F6               	movwf	msDelay@count
  2556  03B6  3000               	movlw	0
  2557  03B7  00F7               	movwf	msDelay@count+1
  2558  03B8  2027               	fcall	_msDelay
  2559                           
  2560                           ;cFlasher.c: 278: PORTC = 0b001000 | 0b010000;
  2561  03B9  3018               	movlw	24
  2562  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2563  03BB  0087               	movwf	7	;volatile
  2564                           
  2565                           ;cFlasher.c: 279: PORTA = 0b000000;
  2566  03BC  0185               	clrf	5	;volatile
  2567                           
  2568                           ;cFlasher.c: 280: msDelay(100);
  2569  03BD  3064               	movlw	100
  2570  03BE  00F6               	movwf	msDelay@count
  2571  03BF  3000               	movlw	0
  2572  03C0  00F7               	movwf	msDelay@count+1
  2573  03C1  2027               	fcall	_msDelay
  2574                           
  2575                           ;cFlasher.c: 281: PORTC = 0b010000 | 0b100000;
  2576  03C2  3030               	movlw	48
  2577  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2578  03C4  0087               	movwf	7	;volatile
  2579                           
  2580                           ;cFlasher.c: 282: msDelay(100);
  2581  03C5  3064               	movlw	100
  2582  03C6  00F6               	movwf	msDelay@count
  2583  03C7  3000               	movlw	0
  2584  03C8  00F7               	movwf	msDelay@count+1
  2585  03C9  2027               	fcall	_msDelay
  2586                           
  2587                           ;cFlasher.c: 283: PORTC = 0b000001 | 0b100000;
  2588  03CA  3021               	movlw	33
  2589  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  2590  03CC  0087               	movwf	7	;volatile
  2591                           
  2592                           ;cFlasher.c: 284: msDelay(100);
  2593  03CD  3064               	movlw	100
  2594  03CE  00F6               	movwf	msDelay@count
  2595  03CF  3000               	movlw	0
  2596  03D0  00F7               	movwf	msDelay@count+1
  2597  03D1  2027               	fcall	_msDelay
  2598                           
  2599                           ;cFlasher.c: 285: PORTC = 0b000001;
  2600  03D2  3001               	movlw	1
  2601  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2602  03D4  0087               	movwf	7	;volatile
  2603                           
  2604                           ;cFlasher.c: 286: msDelay(100);
  2605  03D5  3064               	movlw	100
  2606  03D6  00F6               	movwf	msDelay@count
  2607  03D7  3000               	movlw	0
  2608  03D8  00F7               	movwf	msDelay@count+1
  2609  03D9  2027               	fcall	_msDelay
  2610                           
  2611                           ;cFlasher.c: 287: PORTA = 0b000001;
  2612  03DA  3001               	movlw	1
  2613  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2614  03DC  0085               	movwf	5	;volatile
  2615                           
  2616                           ;cFlasher.c: 288: msDelay(100);
  2617  03DD  3064               	movlw	100
  2618  03DE  00F6               	movwf	msDelay@count
  2619  03DF  3000               	movlw	0
  2620  03E0  00F7               	movwf	msDelay@count+1
  2621  03E1  2027               	fcall	_msDelay
  2622                           
  2623                           ;cFlasher.c: 290: PORTA = 0b000000;
  2624  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2625  03E3  0185               	clrf	5	;volatile
  2626                           
  2627                           ;cFlasher.c: 291: msDelay(100);
  2628  03E4  3064               	movlw	100
  2629  03E5  00F6               	movwf	msDelay@count
  2630  03E6  3000               	movlw	0
  2631  03E7  00F7               	movwf	msDelay@count+1
  2632  03E8  2027               	fcall	_msDelay
  2633                           
  2634                           ;cFlasher.c: 292: PORTC = 0b000001 | 0b100000;
  2635  03E9  3021               	movlw	33
  2636  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  2637  03EB  0087               	movwf	7	;volatile
  2638                           
  2639                           ;cFlasher.c: 293: msDelay(100);
  2640  03EC  3064               	movlw	100
  2641  03ED  00F6               	movwf	msDelay@count
  2642  03EE  3000               	movlw	0
  2643  03EF  00F7               	movwf	msDelay@count+1
  2644  03F0  2027               	fcall	_msDelay
  2645                           
  2646                           ;cFlasher.c: 294: PORTC = 0b010000 | 0b100000;
  2647  03F1  3030               	movlw	48
  2648  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2649  03F3  0087               	movwf	7	;volatile
  2650                           
  2651                           ;cFlasher.c: 295: msDelay(100);
  2652  03F4  3064               	movlw	100
  2653  03F5  00F6               	movwf	msDelay@count
  2654  03F6  3000               	movlw	0
  2655  03F7  00F7               	movwf	msDelay@count+1
  2656  03F8  2027               	fcall	_msDelay
  2657                           
  2658                           ;cFlasher.c: 296: PORTC = 0b001000 | 0b010000;
  2659  03F9  3018               	movlw	24
  2660  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2661  03FB  0087               	movwf	7	;volatile
  2662                           
  2663                           ;cFlasher.c: 297: msDelay(100);
  2664  03FC  3064               	movlw	100
  2665  03FD  00F6               	movwf	msDelay@count
  2666  03FE  3000               	movlw	0
  2667  03FF  00F7               	movwf	msDelay@count+1
  2668  0400  2027               	fcall	_msDelay
  2669                           
  2670                           ;cFlasher.c: 298: PORTC = 0b001000;
  2671  0401  3008               	movlw	8
  2672  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2673  0403  0087               	movwf	7	;volatile
  2674                           
  2675                           ;cFlasher.c: 299: PORTA = 0b100000;
  2676  0404  3020               	movlw	32
  2677  0405  0085               	movwf	5	;volatile
  2678                           
  2679                           ;cFlasher.c: 300: msDelay(100);
  2680  0406  3064               	movlw	100
  2681  0407  00F6               	movwf	msDelay@count
  2682  0408  3000               	movlw	0
  2683  0409  00F7               	movwf	msDelay@count+1
  2684  040A  2027               	fcall	_msDelay
  2685                           
  2686                           ;cFlasher.c: 301: PORTC = 0b000000;
  2687  040B  1283               	bcf	3,5	;RP0=0, select bank0
  2688  040C  0187               	clrf	7	;volatile
  2689                           
  2690                           ;cFlasher.c: 302: msDelay(100);
  2691  040D  3064               	movlw	100
  2692  040E  00F6               	movwf	msDelay@count
  2693  040F  3000               	movlw	0
  2694  0410  00F7               	movwf	msDelay@count+1
  2695  0411  2027               	fcall	_msDelay
  2696                           
  2697                           ;cFlasher.c: 303: PORTC = 0b001000;
  2698  0412  3008               	movlw	8
  2699  0413  1283               	bcf	3,5	;RP0=0, select bank0
  2700  0414  0087               	movwf	7	;volatile
  2701                           
  2702                           ;cFlasher.c: 304: msDelay(100);
  2703  0415  3064               	movlw	100
  2704  0416  00F6               	movwf	msDelay@count
  2705  0417  3000               	movlw	0
  2706  0418  00F7               	movwf	msDelay@count+1
  2707  0419  2027               	fcall	_msDelay
  2708                           
  2709                           ;cFlasher.c: 305: PORTC = 0b000100 | 0b001000;
  2710  041A  300C               	movlw	12
  2711  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2712  041C  0087               	movwf	7	;volatile
  2713                           
  2714                           ;cFlasher.c: 306: PORTA = 0b000000;
  2715  041D  0185               	clrf	5	;volatile
  2716                           
  2717                           ;cFlasher.c: 307: msDelay(100);
  2718  041E  3064               	movlw	100
  2719  041F  00F6               	movwf	msDelay@count
  2720  0420  3000               	movlw	0
  2721  0421  00F7               	movwf	msDelay@count+1
  2722  0422  2027               	fcall	_msDelay
  2723                           
  2724                           ;cFlasher.c: 308: PORTC = 0b000010 | 0b000100;
  2725  0423  3006               	movlw	6
  2726  0424  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0425  0087               	movwf	7	;volatile
  2728                           
  2729                           ;cFlasher.c: 309: msDelay(100);
  2730  0426  3064               	movlw	100
  2731  0427  00F6               	movwf	msDelay@count
  2732  0428  3000               	movlw	0
  2733  0429  00F7               	movwf	msDelay@count+1
  2734  042A  2027               	fcall	_msDelay
  2735                           
  2736                           ;cFlasher.c: 310: PORTC = 0b000001 | 0b000010;
  2737  042B  3003               	movlw	3
  2738  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2739  042D  0087               	movwf	7	;volatile
  2740                           
  2741                           ;cFlasher.c: 311: msDelay(100);
  2742  042E  3064               	movlw	100
  2743  042F  00F6               	movwf	msDelay@count
  2744  0430  3000               	movlw	0
  2745  0431  00F7               	movwf	msDelay@count+1
  2746  0432  2027               	fcall	_msDelay
  2747                           
  2748                           ;cFlasher.c: 312: PORTC = 0b000001;
  2749  0433  3001               	movlw	1
  2750  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2751  0435  0087               	movwf	7	;volatile
  2752                           
  2753                           ;cFlasher.c: 313: msDelay(100);
  2754  0436  3064               	movlw	100
  2755  0437  00F6               	movwf	msDelay@count
  2756  0438  3000               	movlw	0
  2757  0439  00F7               	movwf	msDelay@count+1
  2758  043A  2027               	fcall	_msDelay
  2759                           
  2760                           ;cFlasher.c: 314: PORTA = 0b000001;
  2761  043B  3001               	movlw	1
  2762  043C  1283               	bcf	3,5	;RP0=0, select bank0
  2763  043D  0085               	movwf	5	;volatile
  2764                           
  2765                           ;cFlasher.c: 315: msDelay(100);
  2766  043E  3064               	movlw	100
  2767  043F  00F6               	movwf	msDelay@count
  2768  0440  3000               	movlw	0
  2769  0441  00F7               	movwf	msDelay@count+1
  2770  0442  2027               	fcall	_msDelay
  2771  0443  0008               	return
  2772  0444                     __end_of_endToEnd:	
  2773                           
  2774                           	psect	text12
  2775  003F                     __ptext12:	
  2776 ;; *************** function _doublePattern *****************
  2777 ;; Defined at:
  2778 ;;		line 326 in file "cFlasher.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0, pclath, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1
  2792 ;;      Params:         0       0       0
  2793 ;;      Locals:         0       0       0
  2794 ;;      Temps:          0       0       0
  2795 ;;      Totals:         0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    1
  2799 ;; This function calls:
  2800 ;;		_msDelay
  2801 ;;		_turnOffAll
  2802 ;; This function is called by:
  2803 ;;		_patternOne
  2804 ;;		_patternTwo
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           
  2809                           ;psect for function _doublePattern
  2810  003F                     _doublePattern:	
  2811                           
  2812                           ;cFlasher.c: 328: turnOffAll();
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _doublePattern: [wreg+status,2+status,0+pclath+cstack]
  2816  003F  2003               	fcall	_turnOffAll
  2817                           
  2818                           ;cFlasher.c: 329: msDelay(150);
  2819  0040  3096               	movlw	150
  2820  0041  00F6               	movwf	msDelay@count
  2821  0042  3000               	movlw	0
  2822  0043  00F7               	movwf	msDelay@count+1
  2823  0044  2027               	fcall	_msDelay
  2824                           
  2825                           ;cFlasher.c: 330: PORTA = 0b000001 | 0b100000;
  2826  0045  3021               	movlw	33
  2827  0046  1283               	bcf	3,5	;RP0=0, select bank0
  2828  0047  0085               	movwf	5	;volatile
  2829                           
  2830                           ;cFlasher.c: 331: PORTC = 0b000001 | 0b001000;
  2831  0048  3009               	movlw	9
  2832  0049  0087               	movwf	7	;volatile
  2833                           
  2834                           ;cFlasher.c: 332: msDelay(150);
  2835  004A  3096               	movlw	150
  2836  004B  00F6               	movwf	msDelay@count
  2837  004C  3000               	movlw	0
  2838  004D  00F7               	movwf	msDelay@count+1
  2839  004E  2027               	fcall	_msDelay
  2840                           
  2841                           ;cFlasher.c: 333: PORTA = 0b000000;
  2842  004F  1283               	bcf	3,5	;RP0=0, select bank0
  2843  0050  0185               	clrf	5	;volatile
  2844                           
  2845                           ;cFlasher.c: 334: PORTC = 0b000010 | 0b000100 | 0b010000 | 0b100000;
  2846  0051  3036               	movlw	54
  2847  0052  0087               	movwf	7	;volatile
  2848                           
  2849                           ;cFlasher.c: 335: msDelay(150);
  2850  0053  3096               	movlw	150
  2851  0054  00F6               	movwf	msDelay@count
  2852  0055  3000               	movlw	0
  2853  0056  00F7               	movwf	msDelay@count+1
  2854  0057  2027               	fcall	_msDelay
  2855  0058  0008               	return
  2856  0059                     __end_of_doublePattern:	
  2857                           
  2858                           	psect	text13
  2859  00FC                     __ptext13:	
  2860 ;; *************** function _crash *****************
  2861 ;; Defined at:
  2862 ;;		line 576 in file "cFlasher.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;		None
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  k               2   11[COMMON] int 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      void 
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMMON   BANK0   BANK1
  2876 ;;      Params:         0       0       0
  2877 ;;      Locals:         2       0       0
  2878 ;;      Temps:          0       0       0
  2879 ;;      Totals:         2       0       0
  2880 ;;Total ram usage:        2 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    1
  2883 ;; This function calls:
  2884 ;;		_msDelay
  2885 ;;		_turnOffAll
  2886 ;; This function is called by:
  2887 ;;		_patternOne
  2888 ;;		_patternTwo
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           
  2893                           ;psect for function _crash
  2894  00FC                     _crash:	
  2895                           
  2896                           ;cFlasher.c: 578: turnOffAll();
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _crash: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2900  00FC  2003               	fcall	_turnOffAll
  2901                           
  2902                           ;cFlasher.c: 579: msDelay(150);
  2903  00FD  3096               	movlw	150
  2904  00FE  00F6               	movwf	msDelay@count
  2905  00FF  3000               	movlw	0
  2906  0100  00F7               	movwf	msDelay@count+1
  2907  0101  2027               	fcall	_msDelay
  2908                           
  2909                           ;cFlasher.c: 580: PORTA = 0b000001 | 0b100000;
  2910  0102  3021               	movlw	33
  2911  0103  1283               	bcf	3,5	;RP0=0, select bank0
  2912  0104  0085               	movwf	5	;volatile
  2913                           
  2914                           ;cFlasher.c: 581: msDelay(130);
  2915  0105  3082               	movlw	130
  2916  0106  00F6               	movwf	msDelay@count
  2917  0107  3000               	movlw	0
  2918  0108  00F7               	movwf	msDelay@count+1
  2919  0109  2027               	fcall	_msDelay
  2920                           
  2921                           ;cFlasher.c: 582: PORTC = 0b000001 | 0b001000;
  2922  010A  3009               	movlw	9
  2923  010B  1283               	bcf	3,5	;RP0=0, select bank0
  2924  010C  0087               	movwf	7	;volatile
  2925                           
  2926                           ;cFlasher.c: 583: msDelay(110);
  2927  010D  306E               	movlw	110
  2928  010E  00F6               	movwf	msDelay@count
  2929  010F  3000               	movlw	0
  2930  0110  00F7               	movwf	msDelay@count+1
  2931  0111  2027               	fcall	_msDelay
  2932                           
  2933                           ;cFlasher.c: 584: PORTC = 0b000001 | 0b000010 | 0b000100 | 0b001000 | 0b010000 | 0b10000
      +                          0;
  2934  0112  303F               	movlw	63
  2935  0113  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0114  0087               	movwf	7	;volatile
  2937                           
  2938                           ;cFlasher.c: 585: msDelay(100);
  2939  0115  3064               	movlw	100
  2940  0116  00F6               	movwf	msDelay@count
  2941  0117  3000               	movlw	0
  2942  0118  00F7               	movwf	msDelay@count+1
  2943  0119  2027               	fcall	_msDelay
  2944                           
  2945                           ;cFlasher.c: 586: PORTC = 0b000001 | 0b001000;
  2946  011A  3009               	movlw	9
  2947  011B  1283               	bcf	3,5	;RP0=0, select bank0
  2948  011C  0087               	movwf	7	;volatile
  2949                           
  2950                           ;cFlasher.c: 587: msDelay(110);
  2951  011D  306E               	movlw	110
  2952  011E  00F6               	movwf	msDelay@count
  2953  011F  3000               	movlw	0
  2954  0120  00F7               	movwf	msDelay@count+1
  2955  0121  2027               	fcall	_msDelay
  2956                           
  2957                           ;cFlasher.c: 588: PORTC = 0b000000;
  2958  0122  1283               	bcf	3,5	;RP0=0, select bank0
  2959  0123  0187               	clrf	7	;volatile
  2960                           
  2961                           ;cFlasher.c: 589: msDelay(130);
  2962  0124  3082               	movlw	130
  2963  0125  00F6               	movwf	msDelay@count
  2964  0126  3000               	movlw	0
  2965  0127  00F7               	movwf	msDelay@count+1
  2966  0128  2027               	fcall	_msDelay
  2967                           
  2968                           ;cFlasher.c: 590: for (int k = 0; k < 3; k++) {
  2969  0129  01FB               	clrf	crash@k
  2970  012A  01FC               	clrf	crash@k+1
  2971  012B                     L3:	
  2972  012B  087C               	movf	crash@k+1,w
  2973  012C  3A80               	xorlw	128
  2974  012D  00FF               	movwf	127
  2975  012E  3080               	movlw	128
  2976  012F  027F               	subwf	127,w
  2977  0130  1D03               	skipz
  2978  0131  2934               	goto	u435
  2979  0132  3003               	movlw	3
  2980  0133  027B               	subwf	crash@k,w
  2981  0134                     u435:	
  2982  0134  1803               	btfsc	3,0
  2983  0135  0008               	return
  2984                           
  2985                           ;cFlasher.c: 591: PORTA = 0b000000;
  2986  0136  1283               	bcf	3,5	;RP0=0, select bank0
  2987  0137  0185               	clrf	5	;volatile
  2988                           
  2989                           ;cFlasher.c: 592: msDelay(150);
  2990  0138  3096               	movlw	150
  2991  0139  00F6               	movwf	msDelay@count
  2992  013A  3000               	movlw	0
  2993  013B  00F7               	movwf	msDelay@count+1
  2994  013C  2027               	fcall	_msDelay
  2995                           
  2996                           ;cFlasher.c: 593: PORTA = 0b000001 | 0b100000;
  2997  013D  3021               	movlw	33
  2998  013E  1283               	bcf	3,5	;RP0=0, select bank0
  2999  013F  0085               	movwf	5	;volatile
  3000                           
  3001                           ;cFlasher.c: 594: msDelay(150);
  3002  0140  3096               	movlw	150
  3003  0141  00F6               	movwf	msDelay@count
  3004  0142  3000               	movlw	0
  3005  0143  00F7               	movwf	msDelay@count+1
  3006  0144  2027               	fcall	_msDelay
  3007  0145  3001               	movlw	1
  3008  0146  07FB               	addwf	crash@k,f
  3009  0147  1803               	skipnc
  3010  0148  0AFC               	incf	crash@k+1,f
  3011  0149  3000               	movlw	0
  3012  014A  07FC               	addwf	crash@k+1,f
  3013  014B  292B               	goto	L3
  3014  014C                     __end_of_crash:	
  3015                           
  3016                           	psect	text14
  3017  0665                     __ptext14:	
  3018 ;; *************** function _circlePattern *****************
  3019 ;; Defined at:
  3020 ;;		line 426 in file "cFlasher.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  multiplier      2   11[COMMON] int 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, pclath, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1
  3034 ;;      Params:         2       0       0
  3035 ;;      Locals:         0       0       0
  3036 ;;      Temps:          0       2       0
  3037 ;;      Totals:         2       2       0
  3038 ;;Total ram usage:        4 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    1
  3041 ;; This function calls:
  3042 ;;		___wmul
  3043 ;;		_msDelay
  3044 ;;		_turnOffAll
  3045 ;; This function is called by:
  3046 ;;		_patternOne
  3047 ;;		_patternTwo
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           
  3052                           ;psect for function _circlePattern
  3053  0665                     _circlePattern:	
  3054                           
  3055                           ;cFlasher.c: 428: turnOffAll();
  3056                           
  3057                           ;incstack = 0
  3058                           ; Regs used in _circlePattern: [wreg+status,2+status,0+pclath+cstack]
  3059  0665  2003               	fcall	_turnOffAll
  3060                           
  3061                           ;cFlasher.c: 429: msDelay(100 - multiplier * 30);
  3062  0666  087C               	movf	circlePattern@multiplier+1,w
  3063  0667  00F1               	movwf	___wmul@multiplier+1
  3064  0668  087B               	movf	circlePattern@multiplier,w
  3065  0669  00F0               	movwf	___wmul@multiplier
  3066  066A  301E               	movlw	30
  3067  066B  00F2               	movwf	___wmul@multiplicand
  3068  066C  3000               	movlw	0
  3069  066D  00F3               	movwf	___wmul@multiplicand+1
  3070  066E  2076               	fcall	___wmul
  3071  066F  0970               	comf	?___wmul,w
  3072  0670  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0671  00A0               	movwf	??_circlePattern
  3074  0672  0971               	comf	?___wmul+1,w
  3075  0673  00A1               	movwf	??_circlePattern+1
  3076  0674  0AA0               	incf	??_circlePattern,f
  3077  0675  1903               	skipnz
  3078  0676  0AA1               	incf	??_circlePattern+1,f
  3079  0677  0820               	movf	??_circlePattern,w
  3080  0678  3E64               	addlw	100
  3081  0679  00F6               	movwf	msDelay@count
  3082  067A  0821               	movf	??_circlePattern+1,w
  3083  067B  1803               	skipnc
  3084  067C  3E01               	addlw	1
  3085  067D  3E00               	addlw	0
  3086  067E  00F7               	movwf	msDelay@count+1
  3087  067F  2027               	fcall	_msDelay
  3088                           
  3089                           ;cFlasher.c: 430: PORTC = 0b000001;
  3090  0680  3001               	movlw	1
  3091  0681  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0682  0087               	movwf	7	;volatile
  3093                           
  3094                           ;cFlasher.c: 431: msDelay(100 - multiplier * 30);
  3095  0683  087C               	movf	circlePattern@multiplier+1,w
  3096  0684  00F1               	movwf	___wmul@multiplier+1
  3097  0685  087B               	movf	circlePattern@multiplier,w
  3098  0686  00F0               	movwf	___wmul@multiplier
  3099  0687  301E               	movlw	30
  3100  0688  00F2               	movwf	___wmul@multiplicand
  3101  0689  3000               	movlw	0
  3102  068A  00F3               	movwf	___wmul@multiplicand+1
  3103  068B  2076               	fcall	___wmul
  3104  068C  0970               	comf	?___wmul,w
  3105  068D  1283               	bcf	3,5	;RP0=0, select bank0
  3106  068E  00A0               	movwf	??_circlePattern
  3107  068F  0971               	comf	?___wmul+1,w
  3108  0690  00A1               	movwf	??_circlePattern+1
  3109  0691  0AA0               	incf	??_circlePattern,f
  3110  0692  1903               	skipnz
  3111  0693  0AA1               	incf	??_circlePattern+1,f
  3112  0694  0820               	movf	??_circlePattern,w
  3113  0695  3E64               	addlw	100
  3114  0696  00F6               	movwf	msDelay@count
  3115  0697  0821               	movf	??_circlePattern+1,w
  3116  0698  1803               	skipnc
  3117  0699  3E01               	addlw	1
  3118  069A  3E00               	addlw	0
  3119  069B  00F7               	movwf	msDelay@count+1
  3120  069C  2027               	fcall	_msDelay
  3121                           
  3122                           ;cFlasher.c: 432: PORTC = 0b000010;
  3123  069D  3002               	movlw	2
  3124  069E  1283               	bcf	3,5	;RP0=0, select bank0
  3125  069F  0087               	movwf	7	;volatile
  3126                           
  3127                           ;cFlasher.c: 433: msDelay(100 - multiplier * 30);
  3128  06A0  087C               	movf	circlePattern@multiplier+1,w
  3129  06A1  00F1               	movwf	___wmul@multiplier+1
  3130  06A2  087B               	movf	circlePattern@multiplier,w
  3131  06A3  00F0               	movwf	___wmul@multiplier
  3132  06A4  301E               	movlw	30
  3133  06A5  00F2               	movwf	___wmul@multiplicand
  3134  06A6  3000               	movlw	0
  3135  06A7  00F3               	movwf	___wmul@multiplicand+1
  3136  06A8  2076               	fcall	___wmul
  3137  06A9  0970               	comf	?___wmul,w
  3138  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  3139  06AB  00A0               	movwf	??_circlePattern
  3140  06AC  0971               	comf	?___wmul+1,w
  3141  06AD  00A1               	movwf	??_circlePattern+1
  3142  06AE  0AA0               	incf	??_circlePattern,f
  3143  06AF  1903               	skipnz
  3144  06B0  0AA1               	incf	??_circlePattern+1,f
  3145  06B1  0820               	movf	??_circlePattern,w
  3146  06B2  3E64               	addlw	100
  3147  06B3  00F6               	movwf	msDelay@count
  3148  06B4  0821               	movf	??_circlePattern+1,w
  3149  06B5  1803               	skipnc
  3150  06B6  3E01               	addlw	1
  3151  06B7  3E00               	addlw	0
  3152  06B8  00F7               	movwf	msDelay@count+1
  3153  06B9  2027               	fcall	_msDelay
  3154                           
  3155                           ;cFlasher.c: 434: PORTC = 0b000100;
  3156  06BA  3004               	movlw	4
  3157  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  3158  06BC  0087               	movwf	7	;volatile
  3159                           
  3160                           ;cFlasher.c: 435: msDelay(100 - multiplier * 30);
  3161  06BD  087C               	movf	circlePattern@multiplier+1,w
  3162  06BE  00F1               	movwf	___wmul@multiplier+1
  3163  06BF  087B               	movf	circlePattern@multiplier,w
  3164  06C0  00F0               	movwf	___wmul@multiplier
  3165  06C1  301E               	movlw	30
  3166  06C2  00F2               	movwf	___wmul@multiplicand
  3167  06C3  3000               	movlw	0
  3168  06C4  00F3               	movwf	___wmul@multiplicand+1
  3169  06C5  2076               	fcall	___wmul
  3170  06C6  0970               	comf	?___wmul,w
  3171  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  3172  06C8  00A0               	movwf	??_circlePattern
  3173  06C9  0971               	comf	?___wmul+1,w
  3174  06CA  00A1               	movwf	??_circlePattern+1
  3175  06CB  0AA0               	incf	??_circlePattern,f
  3176  06CC  1903               	skipnz
  3177  06CD  0AA1               	incf	??_circlePattern+1,f
  3178  06CE  0820               	movf	??_circlePattern,w
  3179  06CF  3E64               	addlw	100
  3180  06D0  00F6               	movwf	msDelay@count
  3181  06D1  0821               	movf	??_circlePattern+1,w
  3182  06D2  1803               	skipnc
  3183  06D3  3E01               	addlw	1
  3184  06D4  3E00               	addlw	0
  3185  06D5  00F7               	movwf	msDelay@count+1
  3186  06D6  2027               	fcall	_msDelay
  3187                           
  3188                           ;cFlasher.c: 436: PORTC = 0b001000;
  3189  06D7  3008               	movlw	8
  3190  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  3191  06D9  0087               	movwf	7	;volatile
  3192                           
  3193                           ;cFlasher.c: 437: msDelay(100 - multiplier * 30);
  3194  06DA  087C               	movf	circlePattern@multiplier+1,w
  3195  06DB  00F1               	movwf	___wmul@multiplier+1
  3196  06DC  087B               	movf	circlePattern@multiplier,w
  3197  06DD  00F0               	movwf	___wmul@multiplier
  3198  06DE  301E               	movlw	30
  3199  06DF  00F2               	movwf	___wmul@multiplicand
  3200  06E0  3000               	movlw	0
  3201  06E1  00F3               	movwf	___wmul@multiplicand+1
  3202  06E2  2076               	fcall	___wmul
  3203  06E3  0970               	comf	?___wmul,w
  3204  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  3205  06E5  00A0               	movwf	??_circlePattern
  3206  06E6  0971               	comf	?___wmul+1,w
  3207  06E7  00A1               	movwf	??_circlePattern+1
  3208  06E8  0AA0               	incf	??_circlePattern,f
  3209  06E9  1903               	skipnz
  3210  06EA  0AA1               	incf	??_circlePattern+1,f
  3211  06EB  0820               	movf	??_circlePattern,w
  3212  06EC  3E64               	addlw	100
  3213  06ED  00F6               	movwf	msDelay@count
  3214  06EE  0821               	movf	??_circlePattern+1,w
  3215  06EF  1803               	skipnc
  3216  06F0  3E01               	addlw	1
  3217  06F1  3E00               	addlw	0
  3218  06F2  00F7               	movwf	msDelay@count+1
  3219  06F3  2027               	fcall	_msDelay
  3220                           
  3221                           ;cFlasher.c: 438: PORTC = 0b010000;
  3222  06F4  3010               	movlw	16
  3223  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  3224  06F6  0087               	movwf	7	;volatile
  3225                           
  3226                           ;cFlasher.c: 439: msDelay(100 - multiplier * 30);
  3227  06F7  087C               	movf	circlePattern@multiplier+1,w
  3228  06F8  00F1               	movwf	___wmul@multiplier+1
  3229  06F9  087B               	movf	circlePattern@multiplier,w
  3230  06FA  00F0               	movwf	___wmul@multiplier
  3231  06FB  301E               	movlw	30
  3232  06FC  00F2               	movwf	___wmul@multiplicand
  3233  06FD  3000               	movlw	0
  3234  06FE  00F3               	movwf	___wmul@multiplicand+1
  3235  06FF  2076               	fcall	___wmul
  3236  0700  0970               	comf	?___wmul,w
  3237  0701  1283               	bcf	3,5	;RP0=0, select bank0
  3238  0702  00A0               	movwf	??_circlePattern
  3239  0703  0971               	comf	?___wmul+1,w
  3240  0704  00A1               	movwf	??_circlePattern+1
  3241  0705  0AA0               	incf	??_circlePattern,f
  3242  0706  1903               	skipnz
  3243  0707  0AA1               	incf	??_circlePattern+1,f
  3244  0708  0820               	movf	??_circlePattern,w
  3245  0709  3E64               	addlw	100
  3246  070A  00F6               	movwf	msDelay@count
  3247  070B  0821               	movf	??_circlePattern+1,w
  3248  070C  1803               	skipnc
  3249  070D  3E01               	addlw	1
  3250  070E  3E00               	addlw	0
  3251  070F  00F7               	movwf	msDelay@count+1
  3252  0710  2027               	fcall	_msDelay
  3253                           
  3254                           ;cFlasher.c: 440: PORTC = 0b100000;
  3255  0711  3020               	movlw	32
  3256  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0713  0087               	movwf	7	;volatile
  3258                           
  3259                           ;cFlasher.c: 441: msDelay(100 - multiplier * 30);
  3260  0714  087C               	movf	circlePattern@multiplier+1,w
  3261  0715  00F1               	movwf	___wmul@multiplier+1
  3262  0716  087B               	movf	circlePattern@multiplier,w
  3263  0717  00F0               	movwf	___wmul@multiplier
  3264  0718  301E               	movlw	30
  3265  0719  00F2               	movwf	___wmul@multiplicand
  3266  071A  3000               	movlw	0
  3267  071B  00F3               	movwf	___wmul@multiplicand+1
  3268  071C  2076               	fcall	___wmul
  3269  071D  0970               	comf	?___wmul,w
  3270  071E  1283               	bcf	3,5	;RP0=0, select bank0
  3271  071F  00A0               	movwf	??_circlePattern
  3272  0720  0971               	comf	?___wmul+1,w
  3273  0721  00A1               	movwf	??_circlePattern+1
  3274  0722  0AA0               	incf	??_circlePattern,f
  3275  0723  1903               	skipnz
  3276  0724  0AA1               	incf	??_circlePattern+1,f
  3277  0725  0820               	movf	??_circlePattern,w
  3278  0726  3E64               	addlw	100
  3279  0727  00F6               	movwf	msDelay@count
  3280  0728  0821               	movf	??_circlePattern+1,w
  3281  0729  1803               	skipnc
  3282  072A  3E01               	addlw	1
  3283  072B  3E00               	addlw	0
  3284  072C  00F7               	movwf	msDelay@count+1
  3285  072D  2027               	fcall	_msDelay
  3286                           
  3287                           ;cFlasher.c: 442: PORTC = 0b000001;
  3288  072E  3001               	movlw	1
  3289  072F  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0730  0087               	movwf	7	;volatile
  3291                           
  3292                           ;cFlasher.c: 444: turnOffAll();
  3293  0731  2003               	fcall	_turnOffAll
  3294                           
  3295                           ;cFlasher.c: 445: msDelay(100 - multiplier * 30);
  3296  0732  087C               	movf	circlePattern@multiplier+1,w
  3297  0733  00F1               	movwf	___wmul@multiplier+1
  3298  0734  087B               	movf	circlePattern@multiplier,w
  3299  0735  00F0               	movwf	___wmul@multiplier
  3300  0736  301E               	movlw	30
  3301  0737  00F2               	movwf	___wmul@multiplicand
  3302  0738  3000               	movlw	0
  3303  0739  00F3               	movwf	___wmul@multiplicand+1
  3304  073A  2076               	fcall	___wmul
  3305  073B  0970               	comf	?___wmul,w
  3306  073C  1283               	bcf	3,5	;RP0=0, select bank0
  3307  073D  00A0               	movwf	??_circlePattern
  3308  073E  0971               	comf	?___wmul+1,w
  3309  073F  00A1               	movwf	??_circlePattern+1
  3310  0740  0AA0               	incf	??_circlePattern,f
  3311  0741  1903               	skipnz
  3312  0742  0AA1               	incf	??_circlePattern+1,f
  3313  0743  0820               	movf	??_circlePattern,w
  3314  0744  3E64               	addlw	100
  3315  0745  00F6               	movwf	msDelay@count
  3316  0746  0821               	movf	??_circlePattern+1,w
  3317  0747  1803               	skipnc
  3318  0748  3E01               	addlw	1
  3319  0749  3E00               	addlw	0
  3320  074A  00F7               	movwf	msDelay@count+1
  3321  074B  2027               	fcall	_msDelay
  3322                           
  3323                           ;cFlasher.c: 446: PORTC = 0b000001;
  3324  074C  3001               	movlw	1
  3325  074D  1283               	bcf	3,5	;RP0=0, select bank0
  3326  074E  0087               	movwf	7	;volatile
  3327                           
  3328                           ;cFlasher.c: 447: msDelay(100 - multiplier * 30);
  3329  074F  087C               	movf	circlePattern@multiplier+1,w
  3330  0750  00F1               	movwf	___wmul@multiplier+1
  3331  0751  087B               	movf	circlePattern@multiplier,w
  3332  0752  00F0               	movwf	___wmul@multiplier
  3333  0753  301E               	movlw	30
  3334  0754  00F2               	movwf	___wmul@multiplicand
  3335  0755  3000               	movlw	0
  3336  0756  00F3               	movwf	___wmul@multiplicand+1
  3337  0757  2076               	fcall	___wmul
  3338  0758  0970               	comf	?___wmul,w
  3339  0759  1283               	bcf	3,5	;RP0=0, select bank0
  3340  075A  00A0               	movwf	??_circlePattern
  3341  075B  0971               	comf	?___wmul+1,w
  3342  075C  00A1               	movwf	??_circlePattern+1
  3343  075D  0AA0               	incf	??_circlePattern,f
  3344  075E  1903               	skipnz
  3345  075F  0AA1               	incf	??_circlePattern+1,f
  3346  0760  0820               	movf	??_circlePattern,w
  3347  0761  3E64               	addlw	100
  3348  0762  00F6               	movwf	msDelay@count
  3349  0763  0821               	movf	??_circlePattern+1,w
  3350  0764  1803               	skipnc
  3351  0765  3E01               	addlw	1
  3352  0766  3E00               	addlw	0
  3353  0767  00F7               	movwf	msDelay@count+1
  3354  0768  2027               	fcall	_msDelay
  3355                           
  3356                           ;cFlasher.c: 448: PORTC = 0b100000;
  3357  0769  3020               	movlw	32
  3358  076A  1283               	bcf	3,5	;RP0=0, select bank0
  3359  076B  0087               	movwf	7	;volatile
  3360                           
  3361                           ;cFlasher.c: 449: msDelay(100 - multiplier * 30);
  3362  076C  087C               	movf	circlePattern@multiplier+1,w
  3363  076D  00F1               	movwf	___wmul@multiplier+1
  3364  076E  087B               	movf	circlePattern@multiplier,w
  3365  076F  00F0               	movwf	___wmul@multiplier
  3366  0770  301E               	movlw	30
  3367  0771  00F2               	movwf	___wmul@multiplicand
  3368  0772  3000               	movlw	0
  3369  0773  00F3               	movwf	___wmul@multiplicand+1
  3370  0774  2076               	fcall	___wmul
  3371  0775  0970               	comf	?___wmul,w
  3372  0776  1283               	bcf	3,5	;RP0=0, select bank0
  3373  0777  00A0               	movwf	??_circlePattern
  3374  0778  0971               	comf	?___wmul+1,w
  3375  0779  00A1               	movwf	??_circlePattern+1
  3376  077A  0AA0               	incf	??_circlePattern,f
  3377  077B  1903               	skipnz
  3378  077C  0AA1               	incf	??_circlePattern+1,f
  3379  077D  0820               	movf	??_circlePattern,w
  3380  077E  3E64               	addlw	100
  3381  077F  00F6               	movwf	msDelay@count
  3382  0780  0821               	movf	??_circlePattern+1,w
  3383  0781  1803               	skipnc
  3384  0782  3E01               	addlw	1
  3385  0783  3E00               	addlw	0
  3386  0784  00F7               	movwf	msDelay@count+1
  3387  0785  2027               	fcall	_msDelay
  3388                           
  3389                           ;cFlasher.c: 450: PORTC = 0b010000;
  3390  0786  3010               	movlw	16
  3391  0787  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0788  0087               	movwf	7	;volatile
  3393                           
  3394                           ;cFlasher.c: 451: msDelay(100 - multiplier * 30);
  3395  0789  087C               	movf	circlePattern@multiplier+1,w
  3396  078A  00F1               	movwf	___wmul@multiplier+1
  3397  078B  087B               	movf	circlePattern@multiplier,w
  3398  078C  00F0               	movwf	___wmul@multiplier
  3399  078D  301E               	movlw	30
  3400  078E  00F2               	movwf	___wmul@multiplicand
  3401  078F  3000               	movlw	0
  3402  0790  00F3               	movwf	___wmul@multiplicand+1
  3403  0791  2076               	fcall	___wmul
  3404  0792  0970               	comf	?___wmul,w
  3405  0793  1283               	bcf	3,5	;RP0=0, select bank0
  3406  0794  00A0               	movwf	??_circlePattern
  3407  0795  0971               	comf	?___wmul+1,w
  3408  0796  00A1               	movwf	??_circlePattern+1
  3409  0797  0AA0               	incf	??_circlePattern,f
  3410  0798  1903               	skipnz
  3411  0799  0AA1               	incf	??_circlePattern+1,f
  3412  079A  0820               	movf	??_circlePattern,w
  3413  079B  3E64               	addlw	100
  3414  079C  00F6               	movwf	msDelay@count
  3415  079D  0821               	movf	??_circlePattern+1,w
  3416  079E  1803               	skipnc
  3417  079F  3E01               	addlw	1
  3418  07A0  3E00               	addlw	0
  3419  07A1  00F7               	movwf	msDelay@count+1
  3420  07A2  2027               	fcall	_msDelay
  3421                           
  3422                           ;cFlasher.c: 452: PORTC = 0b001000;
  3423  07A3  3008               	movlw	8
  3424  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  3425  07A5  0087               	movwf	7	;volatile
  3426                           
  3427                           ;cFlasher.c: 453: msDelay(100 - multiplier * 30);
  3428  07A6  087C               	movf	circlePattern@multiplier+1,w
  3429  07A7  00F1               	movwf	___wmul@multiplier+1
  3430  07A8  087B               	movf	circlePattern@multiplier,w
  3431  07A9  00F0               	movwf	___wmul@multiplier
  3432  07AA  301E               	movlw	30
  3433  07AB  00F2               	movwf	___wmul@multiplicand
  3434  07AC  3000               	movlw	0
  3435  07AD  00F3               	movwf	___wmul@multiplicand+1
  3436  07AE  2076               	fcall	___wmul
  3437  07AF  0970               	comf	?___wmul,w
  3438  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  3439  07B1  00A0               	movwf	??_circlePattern
  3440  07B2  0971               	comf	?___wmul+1,w
  3441  07B3  00A1               	movwf	??_circlePattern+1
  3442  07B4  0AA0               	incf	??_circlePattern,f
  3443  07B5  1903               	skipnz
  3444  07B6  0AA1               	incf	??_circlePattern+1,f
  3445  07B7  0820               	movf	??_circlePattern,w
  3446  07B8  3E64               	addlw	100
  3447  07B9  00F6               	movwf	msDelay@count
  3448  07BA  0821               	movf	??_circlePattern+1,w
  3449  07BB  1803               	skipnc
  3450  07BC  3E01               	addlw	1
  3451  07BD  3E00               	addlw	0
  3452  07BE  00F7               	movwf	msDelay@count+1
  3453  07BF  2027               	fcall	_msDelay
  3454                           
  3455                           ;cFlasher.c: 454: PORTC = 0b000100;
  3456  07C0  3004               	movlw	4
  3457  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  3458  07C2  0087               	movwf	7	;volatile
  3459                           
  3460                           ;cFlasher.c: 455: msDelay(100 - multiplier * 30);
  3461  07C3  087C               	movf	circlePattern@multiplier+1,w
  3462  07C4  00F1               	movwf	___wmul@multiplier+1
  3463  07C5  087B               	movf	circlePattern@multiplier,w
  3464  07C6  00F0               	movwf	___wmul@multiplier
  3465  07C7  301E               	movlw	30
  3466  07C8  00F2               	movwf	___wmul@multiplicand
  3467  07C9  3000               	movlw	0
  3468  07CA  00F3               	movwf	___wmul@multiplicand+1
  3469  07CB  2076               	fcall	___wmul
  3470  07CC  0970               	comf	?___wmul,w
  3471  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  3472  07CE  00A0               	movwf	??_circlePattern
  3473  07CF  0971               	comf	?___wmul+1,w
  3474  07D0  00A1               	movwf	??_circlePattern+1
  3475  07D1  0AA0               	incf	??_circlePattern,f
  3476  07D2  1903               	skipnz
  3477  07D3  0AA1               	incf	??_circlePattern+1,f
  3478  07D4  0820               	movf	??_circlePattern,w
  3479  07D5  3E64               	addlw	100
  3480  07D6  00F6               	movwf	msDelay@count
  3481  07D7  0821               	movf	??_circlePattern+1,w
  3482  07D8  1803               	skipnc
  3483  07D9  3E01               	addlw	1
  3484  07DA  3E00               	addlw	0
  3485  07DB  00F7               	movwf	msDelay@count+1
  3486  07DC  2027               	fcall	_msDelay
  3487                           
  3488                           ;cFlasher.c: 456: PORTC = 0b000010;
  3489  07DD  3002               	movlw	2
  3490  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  3491  07DF  0087               	movwf	7	;volatile
  3492                           
  3493                           ;cFlasher.c: 457: msDelay(100 - multiplier * 30);
  3494  07E0  087C               	movf	circlePattern@multiplier+1,w
  3495  07E1  00F1               	movwf	___wmul@multiplier+1
  3496  07E2  087B               	movf	circlePattern@multiplier,w
  3497  07E3  00F0               	movwf	___wmul@multiplier
  3498  07E4  301E               	movlw	30
  3499  07E5  00F2               	movwf	___wmul@multiplicand
  3500  07E6  3000               	movlw	0
  3501  07E7  00F3               	movwf	___wmul@multiplicand+1
  3502  07E8  2076               	fcall	___wmul
  3503  07E9  0970               	comf	?___wmul,w
  3504  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  3505  07EB  00A0               	movwf	??_circlePattern
  3506  07EC  0971               	comf	?___wmul+1,w
  3507  07ED  00A1               	movwf	??_circlePattern+1
  3508  07EE  0AA0               	incf	??_circlePattern,f
  3509  07EF  1903               	skipnz
  3510  07F0  0AA1               	incf	??_circlePattern+1,f
  3511  07F1  0820               	movf	??_circlePattern,w
  3512  07F2  3E64               	addlw	100
  3513  07F3  00F6               	movwf	msDelay@count
  3514  07F4  0821               	movf	??_circlePattern+1,w
  3515  07F5  1803               	skipnc
  3516  07F6  3E01               	addlw	1
  3517  07F7  3E00               	addlw	0
  3518  07F8  00F7               	movwf	msDelay@count+1
  3519  07F9  2027               	fcall	_msDelay
  3520                           
  3521                           ;cFlasher.c: 458: PORTC = 0b000001;
  3522  07FA  3001               	movlw	1
  3523  07FB  1283               	bcf	3,5	;RP0=0, select bank0
  3524  07FC  0087               	movwf	7	;volatile
  3525  07FD  0008               	return
  3526  07FE                     __end_of_circlePattern:	
  3527                           
  3528                           	psect	text15
  3529  0003                     __ptext15:	
  3530 ;; *************** function _turnOffAll *****************
  3531 ;; Defined at:
  3532 ;;		line 170 in file "cFlasher.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;		None
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;		None
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		status,2
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMMON   BANK0   BANK1
  3546 ;;      Params:         0       0       0
  3547 ;;      Locals:         0       0       0
  3548 ;;      Temps:          0       0       0
  3549 ;;      Totals:         0       0       0
  3550 ;;Total ram usage:        0 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_doublePattern
  3556 ;;		_alternateDouble
  3557 ;;		_circlePattern
  3558 ;;		_flashAllOn
  3559 ;;		_flashAlternating
  3560 ;;		_diagonalPattern
  3561 ;;		_swipe
  3562 ;;		_crash
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           
  3567                           ;psect for function _turnOffAll
  3568  0003                     _turnOffAll:	
  3569                           
  3570                           ;cFlasher.c: 171: PORTA = 0b000000;
  3571                           
  3572                           ;incstack = 0
  3573                           ; Regs used in _turnOffAll: [status,2]
  3574  0003  1283               	bcf	3,5	;RP0=0, select bank0
  3575  0004  0185               	clrf	5	;volatile
  3576                           
  3577                           ;cFlasher.c: 172: PORTC = 0b000000;
  3578  0005  0187               	clrf	7	;volatile
  3579  0006  0008               	return
  3580  0007                     __end_of_turnOffAll:	
  3581                           
  3582                           	psect	text16
  3583  0027                     __ptext16:	
  3584 ;; *************** function _msDelay *****************
  3585 ;; Defined at:
  3586 ;;		line 141 in file "cFlasher.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;  count           2    6[COMMON] unsigned int 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  i               2    9[COMMON] int 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1
  3600 ;;      Params:         2       0       0
  3601 ;;      Locals:         2       0       0
  3602 ;;      Temps:          1       0       0
  3603 ;;      Totals:         5       0       0
  3604 ;;Total ram usage:        5 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; This function calls:
  3607 ;;		Nothing
  3608 ;; This function is called by:
  3609 ;;		_patternTwo
  3610 ;;		_endToEnd
  3611 ;;		_doublePattern
  3612 ;;		_rotateDouble
  3613 ;;		_rotateDoubleBackwards
  3614 ;;		_alternateDouble
  3615 ;;		_circlePattern
  3616 ;;		_flashAllOn
  3617 ;;		_flashAlternating
  3618 ;;		_diagonalPattern
  3619 ;;		_swipe
  3620 ;;		_crash
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           
  3625                           ;psect for function _msDelay
  3626  0027                     _msDelay:	
  3627                           
  3628                           ;cFlasher.c: 143: for(int i = 0; i < count; i++){
  3629                           
  3630                           ;incstack = 0
  3631                           ; Regs used in _msDelay: [wreg+status,2]
  3632  0027  01F9               	clrf	msDelay@i
  3633  0028  01FA               	clrf	msDelay@i+1
  3634  0029                     l63:	
  3635  0029  0877               	movf	msDelay@count+1,w
  3636  002A  027A               	subwf	msDelay@i+1,w
  3637  002B  1D03               	skipz
  3638  002C  282F               	goto	u345
  3639  002D  0876               	movf	msDelay@count,w
  3640  002E  0279               	subwf	msDelay@i,w
  3641  002F                     u345:	
  3642  002F  1803               	btfsc	3,0
  3643  0030  0008               	return
  3644                           
  3645                           ;cFlasher.c: 144: _delay((unsigned long)((1)*(4000000/4000.0)));
  3646  0031  30C7               	movlw	199
  3647  0032  00F8               	movwf	??_msDelay
  3648  0033                     u677:	
  3649  0033  2834               	nop2
  3650  0034  0BF8               	decfsz	??_msDelay,f
  3651  0035  2833               	goto	u677
  3652  0036  2837               	nop2
  3653  0037  2838               	nop2
  3654  0038  3001               	movlw	1
  3655  0039  07F9               	addwf	msDelay@i,f
  3656  003A  1803               	skipnc
  3657  003B  0AFA               	incf	msDelay@i+1,f
  3658  003C  3000               	movlw	0
  3659  003D  07FA               	addwf	msDelay@i+1,f
  3660  003E  2829               	goto	l63
  3661  003F                     __end_of_msDelay:	
  3662                           
  3663                           	psect	text17
  3664  0076                     __ptext17:	
  3665 ;; *************** function ___wmul *****************
  3666 ;; Defined at:
  3667 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  multiplier      2    0[COMMON] unsigned int 
  3670 ;;  multiplicand    2    2[COMMON] unsigned int 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  product         2    4[COMMON] unsigned int 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  2    0[COMMON] unsigned int 
  3675 ;; Registers used:
  3676 ;;		wreg, status,2, status,0
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1
  3682 ;;      Params:         4       0       0
  3683 ;;      Locals:         2       0       0
  3684 ;;      Temps:          0       0       0
  3685 ;;      Totals:         6       0       0
  3686 ;;Total ram usage:        6 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_rotateDouble
  3692 ;;		_alternateDouble
  3693 ;;		_circlePattern
  3694 ;;		_flashAlternating
  3695 ;;		_diagonalPattern
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function ___wmul
  3701  0076                     ___wmul:	
  3702                           
  3703                           ;incstack = 0
  3704                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3705  0076  01F4               	clrf	___wmul@product
  3706  0077  01F5               	clrf	___wmul@product+1
  3707  0078                     l1141:	
  3708  0078  1C70               	btfss	___wmul@multiplier,0
  3709  0079  2880               	goto	l217
  3710  007A  0872               	movf	___wmul@multiplicand,w
  3711  007B  07F4               	addwf	___wmul@product,f
  3712  007C  1803               	skipnc
  3713  007D  0AF5               	incf	___wmul@product+1,f
  3714  007E  0873               	movf	___wmul@multiplicand+1,w
  3715  007F  07F5               	addwf	___wmul@product+1,f
  3716  0080                     l217:	
  3717  0080  3001               	movlw	1
  3718  0081                     u365:	
  3719  0081  1003               	clrc
  3720  0082  0DF2               	rlf	___wmul@multiplicand,f
  3721  0083  0DF3               	rlf	___wmul@multiplicand+1,f
  3722  0084  3EFF               	addlw	-1
  3723  0085  1D03               	skipz
  3724  0086  2881               	goto	u365
  3725  0087  3001               	movlw	1
  3726  0088                     u375:	
  3727  0088  1003               	clrc
  3728  0089  0CF1               	rrf	___wmul@multiplier+1,f
  3729  008A  0CF0               	rrf	___wmul@multiplier,f
  3730  008B  3EFF               	addlw	-1
  3731  008C  1D03               	skipz
  3732  008D  2888               	goto	u375
  3733  008E  0870               	movf	___wmul@multiplier,w
  3734  008F  0471               	iorwf	___wmul@multiplier+1,w
  3735  0090  1D03               	btfss	3,2
  3736  0091  2878               	goto	l1141
  3737  0092  0875               	movf	___wmul@product+1,w
  3738  0093  00F1               	movwf	?___wmul+1
  3739  0094  0874               	movf	___wmul@product,w
  3740  0095  00F0               	movwf	?___wmul
  3741  0096  0008               	return
  3742  0097                     __end_of___wmul:	
  3743                           
  3744                           	psect	text18
  3745  000D                     __ptext18:	
  3746 ;; *************** function _Initialize *****************
  3747 ;; Defined at:
  3748 ;;		line 125 in file "cFlasher.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		wreg, status,2
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1
  3762 ;;      Params:         0       0       0
  3763 ;;      Locals:         0       0       0
  3764 ;;      Temps:          0       0       0
  3765 ;;      Totals:         0       0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; This function calls:
  3769 ;;		Nothing
  3770 ;; This function is called by:
  3771 ;;		_main
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           
  3776                           ;psect for function _Initialize
  3777  000D                     _Initialize:	
  3778                           
  3779                           ;cFlasher.c: 127: CMCON0 = 7;
  3780                           
  3781                           ;incstack = 0
  3782                           ; Regs used in _Initialize: [wreg+status,2]
  3783  000D  3007               	movlw	7
  3784  000E  1283               	bcf	3,5	;RP0=0, select bank0
  3785  000F  0099               	movwf	25	;volatile
  3786                           
  3787                           ;cFlasher.c: 128: ANSEL = 0;
  3788  0010  1683               	bsf	3,5	;RP0=1, select bank1
  3789  0011  0191               	clrf	17	;volatile
  3790                           
  3791                           ;cFlasher.c: 129: TRISA = 0b010100;
  3792  0012  3014               	movlw	20
  3793  0013  0085               	movwf	5	;volatile
  3794                           
  3795                           ;cFlasher.c: 130: TRISC = 0b000000;
  3796  0014  0187               	clrf	7	;volatile
  3797  0015  0008               	return
  3798  0016                     __end_of_Initialize:	
  3799  007E                     btemp	set	126	;btemp
  3800  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     16      16
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _patternTwo->_alternateDouble
    _patternTwo->_circlePattern
    _patternTwo->_crash
    _patternTwo->_diagonalPattern
    _patternTwo->_flashAllOn
    _patternTwo->_flashAlternating
    _patternTwo->_rotateDouble
    _rotateDoubleBackwards->_msDelay
    _diagonalPattern->_msDelay
    _alternateDouble->_msDelay
    _patternOne->_circlePattern
    _patternOne->_crash
    _patternOne->_flashAllOn
    _patternOne->_flashAlternating
    _patternOne->_rotateDouble
    _swipe->_msDelay
    _rotateDouble->_msDelay
    _flashAlternating->_msDelay
    _flashAllOn->_msDelay
    _endToEnd->_msDelay
    _doublePattern->_msDelay
    _crash->_msDelay
    _circlePattern->_msDelay
    _msDelay->___wmul

Critical Paths under _main in BANK0

    _main->_patternTwo
    _patternTwo->_rotateDouble
    _patternOne->_rotateDouble

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  133796
                         _Initialize
                         _patternOne
                         _patternTwo
 ---------------------------------------------------------------------------------
 (1) _patternTwo                                          12    12      0   81174
                                              4 BANK0     12    12      0
                    _alternateDouble
                      _circlePattern
                              _crash
                    _diagonalPattern
                      _doublePattern
                           _endToEnd
                         _flashAllOn
                   _flashAlternating
                            _msDelay
                       _rotateDouble
              _rotateDoubleBackwards
                              _swipe
                          _turnOnAll
 ---------------------------------------------------------------------------------
 (2) _rotateDoubleBackwards                                0     0      0    4869
                            _msDelay
 ---------------------------------------------------------------------------------
 (2) _diagonalPattern                                      4     2      2    9368
                                             11 COMMON     2     0      2
                                              0 BANK0      2     2      0
                             ___wmul
                            _msDelay
                         _turnOffAll
 ---------------------------------------------------------------------------------
 (2) _alternateDouble                                      4     2      2    9196
                                             11 COMMON     2     0      2
                                              0 BANK0      2     2      0
                             ___wmul
                            _msDelay
                         _turnOffAll
 ---------------------------------------------------------------------------------
 (1) _patternOne                                           4     4      0   52622
                                              4 BANK0      4     4      0
                      _circlePattern
                              _crash
                      _doublePattern
                           _endToEnd
                         _flashAllOn
                   _flashAlternating
                       _rotateDouble
                              _swipe
                          _turnOnAll
 ---------------------------------------------------------------------------------
 (2) _swipe                                                0     0      0    4869
                            _msDelay
                         _turnOffAll
 ---------------------------------------------------------------------------------
 (2) _rotateDouble                                         6     4      2    9282
                                             11 COMMON     2     0      2
                                              0 BANK0      4     4      0
                             ___wmul
                            _msDelay
 ---------------------------------------------------------------------------------
 (2) _flashAlternating                                     4     2      2    9161
                                             11 COMMON     2     0      2
                                              0 BANK0      2     2      0
                             ___wmul
                            _msDelay
                         _turnOffAll
 ---------------------------------------------------------------------------------
 (2) _flashAllOn                                           2     2      0    4959
                                             11 COMMON     2     2      0
                            _msDelay
                         _turnOffAll
                          _turnOnAll
 ---------------------------------------------------------------------------------
 (2) _turnOnAll                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _endToEnd                                             0     0      0    4869
                            _msDelay
 ---------------------------------------------------------------------------------
 (2) _doublePattern                                        0     0      0    4869
                            _msDelay
                         _turnOffAll
 ---------------------------------------------------------------------------------
 (2) _crash                                                2     2      0    4915
                                             11 COMMON     2     2      0
                            _msDelay
                         _turnOffAll
 ---------------------------------------------------------------------------------
 (2) _circlePattern                                        4     2      2    9562
                                             11 COMMON     2     0      2
                                              0 BANK0      2     2      0
                             ___wmul
                            _msDelay
                         _turnOffAll
 ---------------------------------------------------------------------------------
 (3) _turnOffAll                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _msDelay                                              5     3      2    4869
                                              6 COMMON     5     3      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4120
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialize
   _patternOne
     _circlePattern
       ___wmul
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _crash
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _doublePattern
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _endToEnd
       _msDelay
         ___wmul (ARG)
     _flashAllOn
       _msDelay
         ___wmul (ARG)
       _turnOffAll
       _turnOnAll
     _flashAlternating
       ___wmul
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _rotateDouble
       ___wmul
       _msDelay
         ___wmul (ARG)
     _swipe
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _turnOnAll
   _patternTwo
     _alternateDouble
       ___wmul
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _circlePattern
       ___wmul
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _crash
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _diagonalPattern
       ___wmul
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _doublePattern
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _endToEnd
       _msDelay
         ___wmul (ARG)
     _flashAllOn
       _msDelay
         ___wmul (ARG)
       _turnOffAll
       _turnOnAll
     _flashAlternating
       ___wmul
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _msDelay
       ___wmul (ARG)
     _rotateDouble
       ___wmul
       _msDelay
         ___wmul (ARG)
     _rotateDoubleBackwards
       _msDelay
         ___wmul (ARG)
     _swipe
       _msDelay
         ___wmul (ARG)
       _turnOffAll
     _turnOnAll

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     10      10       4       20.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jun 17 12:32:40 2019

                  _rotateDouble 0204                     __CFG_CP$OFF 0000                              l63 0029  
           ___wmul@multiplicand 0072                             l217 0080                             _RA2 002A  
                           _RA4 002C                             u415 028A                             u345 002F  
                           u505 046F                    __CFG_CPD$OFF 0000                             u435 0134  
                           u515 047D                             u365 0081                             u605 0531  
                           u525 0493                             u375 0088                             u455 01AE  
                           u535 04AB                             u465 01C2                             u545 04BE  
                           u395 00A4                             u475 01DB                             u555 04CC  
                           u485 01EE                             u565 04E2                             u575 04F0  
                           u495 0451                             u585 04FF                             u595 051D  
                           u677 0033                            l1141 0078                            l1601 04C0  
                          l1531 01C4                            l1523 01B0                            l1613 04E4  
                          l1543 01F0                            l1607 04CE                            l1537 01DD  
                          l1633 051F                            l1627 0501                            l1619 04F2  
                          l1651 001D                            l1581 047F                            l1645 0017  
                          l1639 0533                            l1575 0471                            l1569 0453  
                          l1657 0021                            l1595 04AD                            l1589 0495  
      __end_of_flashAlternating 01A2                            _main 0016                            btemp 007E  
                          start 0000                   __CFG_IESO$OFF 0000        __size_of_diagonalPattern 0123  
                 _doublePattern 003F                           ?_main 0070                   __CFG_WDTE$OFF 0000  
                         _ANSEL 0091                           _PORTA 0005                           _PORTC 0007  
                         _TRISA 0085                           _TRISC 0087                   __CFG_PWRTE$ON 0000  
                __CFG_FCMEN$OFF 0000                 __end_of_msDelay 003F               ??_alternateDouble 0020  
                         _crash 00FC                           _swipe 00B9                  __CFG_BOREN$OFF 0000  
                         status 0003                           wtemp0 007E                  __CFG_MCLRE$OFF 0000  
                ?_doublePattern 0070                 __initialization 07FE                    __end_of_main 0027  
                    _Initialize 000D                          ??_main 007D                    msDelay@count 0076  
                        ?_crash 0070                          _CMCON0 0019                          ?_swipe 0070  
              __end_of_endToEnd 0444                          ___wmul 0076         ??_rotateDoubleBackwards 007B  
                        crash@k 007B               ??_diagonalPattern 0020                       ??_msDelay 0078  
       circlePattern@multiplier 007B         __end_of__initialization 07FE                 ??_doublePattern 007B  
                __pcstackCOMMON 0070                   __end_of_crash 014C                     ?_Initialize 0070  
                 __end_of_swipe 00FC           __end_of_circlePattern 07FE                         ??_crash 007B  
                 rotateDouble@k 0022                         ??_swipe 007B               ?_flashAlternating 007B  
            ??_flashAlternating 0020                      __pmaintext 0016                         ?___wmul 0070  
                   patternOne@i 0024                     patternOne@j 0026                 _alternateDouble 02AC  
                   patternTwo@i 002A                     patternTwo@j 0024                      _flashAllOn 0097  
                     ?_endToEnd 0070             __size_of_Initialize 0009              __size_of_turnOnAll 0006  
               __size_of___wmul 0021                         __ptext1 0444                         __ptext2 0059  
                       __ptext3 0542                         __ptext4 02AC                         __ptext5 01A2  
                       __ptext6 00B9                         __ptext7 0204                         __ptext8 014C  
                       __ptext9 0097                         _msDelay 0027                      ??_endToEnd 007B  
          end_of_initialization 07FE                      _patternOne 01A2                      _patternTwo 0444  
               _diagonalPattern 0542         __end_of_alternateDouble 0376  __size_of_rotateDoubleBackwards 001D  
 __end_of_rotateDoubleBackwards 0076                     ?_flashAllOn 0070               __end_of_turnOnAll 000D  
                    _turnOffAll 0003                   ?_rotateDouble 007B                    ??_Initialize 0070  
                __end_of___wmul 0097             start_initialization 07FE                     ?_patternOne 0070  
                   ?_patternTwo 0070         __end_of_diagonalPattern 0665              __end_of_Initialize 0016  
               patternTwo@i_112 002C                 patternTwo@i_114 0026                 patternTwo@i_115 0028  
               patternTwo@j_116 002E             __size_of_flashAllOn 0022           __end_of_doublePattern 0059  
              ?_alternateDouble 007B                  ??_rotateDouble 0020                        ??___wmul 0074  
     __size_of_flashAlternating 0056                       ___latbits 0000                   __pcstackBANK0 0020  
     diagonalPattern@multiplier 007B               __size_of_endToEnd 00CE          __size_of_circlePattern 0199  
                   ?_turnOffAll 0070             __size_of_patternOne 0062             __size_of_patternTwo 00FE  
                      ?_msDelay 0076                  __size_of_crash 0050                  __size_of_swipe 0043  
              ?_diagonalPattern 007B      flashAlternating@multiplier 007B                  ___wmul@product 0074  
        rotateDouble@multiplier 007B                    ??_flashAllOn 007B               ___wmul@multiplier 0070  
                 _circlePattern 0665                       _turnOnAll 0007             __size_of_turnOffAll 0004  
          __end_of_rotateDouble 02AC              __end_of_flashAllOn 00B9                _flashAlternating 014C  
                ?_circlePattern 007B           _rotateDoubleBackwards 0059                __size_of_msDelay 0018  
                      _endToEnd 0376                      ?_turnOnAll 0070                        __ptext10 0007  
                      __ptext11 0376                        __ptext12 003F                        __ptext13 00FC  
                      __ptext14 0665                        __ptext15 0003                        __ptext16 0027  
                      __ptext17 0076                        __ptext18 000D                    ??_patternOne 007D  
                  ??_patternTwo 007D                   __size_of_main 0011                        msDelay@i 0079  
     alternateDouble@multiplier 007B              __end_of_patternOne 0204              __end_of_patternTwo 0542  
                  ??_turnOffAll 0070                 ??_circlePattern 0020        __size_of_alternateDouble 00CA  
        ?_rotateDoubleBackwards 0070           __size_of_rotateDouble 00A8                     ??_turnOnAll 0070  
        __size_of_doublePattern 001A              __end_of_turnOffAll 0007              __CFG_FOSC$INTOSCIO 0000  
                   flashAllOn@k 007B  
